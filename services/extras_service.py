"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
"""
import aiohttp
from typing import Dict, Optional
import random


class ExtrasService:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    def __init__(self):
        pass
    
    async def get_weather(self, city: str = "Moscow") -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ (—á–µ—Ä–µ–∑ wttr.in)
        """
        try:
            url = f"https://wttr.in/{city}?format=3&lang=ru"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        weather = await response.text()
                        return weather.strip()
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return None
    
    async def get_exchange_rates(self, base: str = "USD") -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API –¶–ë –†–§
            url = "https://www.cbr-xml-daily.ru/daily_json.js"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            "USD": data["Valute"]["USD"]["Value"],
                            "EUR": data["Valute"]["EUR"]["Value"],
                            "CNY": data["Valute"]["CNY"]["Value"],
                            "date": data["Date"]
                        }
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return None
    
    async def get_crypto_price(self, symbol: str = "BTC") -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        """
        try:
            url = f"https://api.coinbase.com/v2/prices/{symbol}-USD/spot"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            "symbol": symbol,
                            "price": data["data"]["amount"],
                            "currency": data["data"]["currency"]
                        }
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç—ã: {e}")
            return None
    
    def get_random_fact(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
        """
        facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∫–æ–ª–æ 70,000 –º—ã—Å–ª–µ–π –≤ –¥–µ–Ω—å.",
            "üåç –†–æ—Å—Å–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ 11% –≤—Å–µ–π —Å—É—à–∏ –Ω–∞ –ó–µ–º–ª–µ.",
            "‚ö° –ú–æ–ª–Ω–∏—è –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞.",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å.",
            "üåô –ù–∞ –õ—É–Ω–µ –Ω–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –ø–æ—ç—Ç–æ–º—É —Ç–∞–º –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–∏—à–∏–Ω–∞.",
            "üîã –ë–∞—Ç–∞—Ä–µ–π–∫–∏ –∏–∑–æ–±—Ä–µ–ª–∏ –Ω–∞ 40 –ª–µ—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –Ω–∞—à–ª–∏ –∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.",
            "üéÆ –í –Ø–ø–æ–Ω–∏–∏ –±–æ–ª—å—à–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–º–∞—à–Ω–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, —á–µ–º –¥–µ—Ç–µ–π.",
            "üåä 95% –º–∏—Ä–æ–≤–æ–≥–æ –æ–∫–µ–∞–Ω–∞ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–º–∏.",
            "‚òï –ö–æ—Ñ–µ - –≤—Ç–æ—Ä–æ–π –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ç–æ–≤–∞—Ä –≤ –º–∏—Ä–µ –ø–æ—Å–ª–µ –Ω–µ—Ñ—Ç–∏.",
            "üêù –ü—á–µ–ª—ã —É–º–µ—é—Ç —Å—á–∏—Ç–∞—Ç—å –¥–æ —á–µ—Ç—ã—Ä–µ—Ö.",
            "üß¨ –î–ù–ö —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 50% —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –î–ù–ö –±–∞–Ω–∞–Ω–∞.",
            "üöÄ –í –∫–æ—Å–º–æ—Å–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ —Å–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è.",
            "üéµ –ú—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã–π —Ä–∏—Ç–º –∏ –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ.",
            "üêå –£–ª–∏—Ç–∫–∞ –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å —Ç—Ä–∏ –≥–æ–¥–∞ –ø–æ–¥—Ä—è–¥.",
            "üíé –ê–ª–º–∞–∑—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–≥–æ –º–∞—Å–ª–∞."
        ]
        return random.choice(facts)
    
    def get_joke(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É
        """
        jokes = [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –º–æ–µ—Ç –≥–æ–ª–æ–≤—É —à–∞–º–ø—É–Ω–µ–º.\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–∞–Ω–µ—Å—Ç–∏, –Ω–∞–º—ã–ª–∏—Ç—å, —Å–º—ã—Ç—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ –µ—â–µ –≤ –¥—É—à–µ...",
            "- –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n- –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞.",
            "–î–µ–≤—É—à–∫–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞:\n- –ú–∏–ª—ã–π, —Å—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ —Ö–ª–µ–±–æ–º.\n- –•–æ—Ä–æ—à–æ, –¥–æ—Ä–æ–≥–∞—è.\n–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —É—à–µ–ª –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è. –û–Ω–∞ –∑–∞–±—ã–ª–∞ —É–∫–∞–∑–∞—Ç—å return.",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ?\n–ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 = DEC 25 üòÑ",
            "- –ö—Ç–æ —Ç–∞–∫–æ–π full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫?\n- –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞–≥–∏ –∏ –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ, –∏ –≤ –±—ç–∫–µ–Ω–¥–µ.",
            "–ñ–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É:\n- –î–æ—Ä–æ–≥–æ–π, –∫—É–ø–∏ –±–∞—Ç–æ–Ω —Ö–ª–µ–±–∞, –∞ –µ—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –≤–æ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫.\n–û–Ω –ø—Ä–∏—à–µ–ª —Å 10 –±–∞—Ç–æ–Ω–∞–º–∏:\n- –Ø–π—Ü–∞ –±—ã–ª–∏!",
            "–î–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –≥–æ–≤–æ—Ä—è—Ç:\n- –£ –º–µ–Ω—è bug.\n- –ê —É –º–µ–Ω—è feature!",
            "- –ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–∏ –æ—à–∏–±–∫–∏?\n- –ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏! üêõ",
        ]
        return random.choice(jokes)
    
    def get_motivational_quote(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        """
        quotes = [
            "üí™ \"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.\" - –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "üéØ \"–ù–µ –±–æ–π—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ. –í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª—ã—Ö —à–∞–≥–æ–≤.\"",
            "üöÄ \"–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.\" - –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç",
            "‚ö° \"–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.\" - –ß–µ—Ä—á–∏–ª–ª—å",
            "üåü \"–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–≥–æ–¥–Ω—è.\"",
            "üí° \"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ - —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –≥—Ä–æ–º–∫–æ–µ —Å–ª–æ–≤–æ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä—è—á—É—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–µ –ª—é–¥–∏.\"",
            "üé® \"–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å - —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è.\" - –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
            "üèÜ \"–ü–æ–±–µ–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞. –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\"",
        ]
        return random.choice(quotes)
    
    async def get_random_activity(self) -> Optional[str]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–µ—Ä–µ–∑ Bored API)
        """
        try:
            url = "https://www.boredapi.com/api/activity"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        activity = data["activity"]
                        activity_type = data["type"]
                        return f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {activity}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {activity_type}"
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def get_tips(self, category: str = "productivity") -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        tips = {
            "productivity": [
                "‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö.",
                "üìù –ó–∞–ø–∏—Å—ã–≤–∞–π –≤—Å–µ –∑–∞–¥–∞—á–∏, –æ—Å–≤–æ–±–æ–∂–¥–∞–π –º–æ–∑–≥ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
                "üéØ –ù–∞—á–∏–Ω–∞–π –¥–µ–Ω—å —Å —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ (Eat the Frog).",
                "üö´ –í—ã–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã.",
                "‚òï –î–µ–ª–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç.",
            ],
            "health": [
                "üíß –ü–µ–π –Ω–µ –º–µ–Ω–µ–µ 2 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ –¥–µ–Ω—å.",
                "üö∂ –î–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤—ã –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.",
                "üëÄ –ü—Ä–∞–≤–∏–ª–æ 20-20-20: –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç —Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ 20 —Ñ—É—Ç–∞—Ö –Ω–∞ 20 —Å–µ–∫—É–Ω–¥.",
                "üßò –ú–µ–¥–∏—Ç–∏—Ä—É–π 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞.",
                "üò¥ –°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
            ],
            "coding": [
                "üìö –ß–∏—Ç–∞–π —á—É–∂–æ–π –∫–æ–¥ - –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É—á–∏—Ç—å—Å—è.",
                "üß™ –ü–∏—à–∏ —Ç–µ—Å—Ç—ã - –æ–Ω–∏ —ç–∫–æ–Ω–æ–º—è—Ç –≤—Ä–µ–º—è –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.",
                "üîç Code review - —Å–ø—Ä–∞—à–∏–≤–∞–π –º–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–≥ –æ —Å–≤–æ–µ–º –∫–æ–¥–µ.",
                "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–¥ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å–µ–±—è.",
                "‚ôªÔ∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –Ω–µ –∫–æ–ø–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥.",
            ]
        }
        
        category_tips = tips.get(category, tips["productivity"])
        return random.choice(category_tips)
    
    def roll_dice(self, sides: int = 6, count: int = 1) -> Dict:
        """
        –ë—Ä–æ—Å–∞–µ—Ç –∫–æ—Å—Ç–∏
        """
        if sides < 2 or sides > 100:
            sides = 6
        if count < 1 or count > 10:
            count = 1
        
        rolls = [random.randint(1, sides) for _ in range(count)]
        total = sum(rolls)
        
        return {
            "rolls": rolls,
            "total": total,
            "count": count,
            "sides": sides
        }
    
    def magic_8ball(self, question: str = None) -> str:
        """
        –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8 - –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å
        """
        responses = [
            "üîÆ –î–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ!",
            "üîÆ –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π.",
            "üîÆ –ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω.",
            "üîÆ –î–∞.",
            "üîÆ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞.",
            "üîÆ –ü–æ–∫–∞ –Ω–µ—è—Å–Ω–æ, —Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.",
            "üîÆ –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞.",
            "üîÆ –õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å.",
            "üîÆ –ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.",
            "üîÆ –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç.",
            "üîÆ –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –Ω–µ—Ç.",
            "üîÆ –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.",
        ]
        
        response = random.choice(responses)
        
        if question:
            return f"‚ùì {question}\n{response}"
        else:
            return response

