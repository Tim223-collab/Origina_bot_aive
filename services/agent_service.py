"""
–°–µ—Ä–≤–∏—Å AI –ê–≥–µ–Ω—Ç–∞ - –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ AIVE
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz

from services.ai_service import AIService
from services.function_tools import FunctionExecutor
from database import Database


class AIAgentService:
    """
    –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π AI –∞–≥–µ–Ω—Ç AIVE
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–º–æ—â—å
    - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    - –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    
    def __init__(self, db: Database, ai: AIService, function_executor: FunctionExecutor):
        self.db = db
        self.ai = ai
        self.executor = function_executor
        self.enabled = True  # –ê–≥–µ–Ω—Ç –í–ö–õ–Æ–ß–ï–ù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!
        self.last_check = {}  # user_id -> datetime –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.user_patterns = {}  # user_id -> —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.task_history = {}  # user_id -> –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
        
    def enable_agent(self, user_id: int):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.enabled = True
        print(f"‚úÖ AI –ê–≥–µ–Ω—Ç AIVE –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    def disable_agent(self, user_id: int):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.enabled = False
        print(f"‚è∏Ô∏è AI –ê–≥–µ–Ω—Ç AIVE –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def is_enabled(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≥–µ–Ω—Ç"""
        return self.enabled
    
    async def check_and_act(self, user_id: int) -> Optional[str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å)
        """
        if not self.is_enabled(user_id):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥–∞–≤–Ω–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å)
        now = datetime.now()
        if user_id in self.last_check:
            time_since_last = now - self.last_check[user_id]
            if time_since_last < timedelta(hours=1):
                return None
        
        self.last_check[user_id] = now
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        context = await self._gather_context(user_id)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º AI –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å
        decision = await self._make_decision(user_id, context)
        
        return decision
    
    async def _gather_context(self, user_id: int) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        
        # –¢–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminders = await self.db.get_reminders(user_id)
        
        # –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        recent_messages = await self.db.get_recent_messages(user_id, limit=5)
        
        # –í—Ä–µ–º—è —Å—É—Ç–æ–∫
        ukraine_tz = pytz.timezone('Europe/Kiev')
        current_time = datetime.now(ukraine_tz)
        hour = current_time.hour
        
        time_of_day = "—É—Ç—Ä–æ" if 6 <= hour < 12 else \
                      "–¥–µ–Ω—å" if 12 <= hour < 18 else \
                      "–≤–µ—á–µ—Ä" if 18 <= hour < 22 else "–Ω–æ—á—å"
        
        context = {
            "time_of_day": time_of_day,
            "hour": hour,
            "day_of_week": current_time.strftime("%A"),
            "reminders_count": len(reminders),
            "reminders": reminders[:3],  # –ü–µ—Ä–≤—ã–µ 3
            "recent_activity": recent_messages,
        }
        
        return context
    
    async def _make_decision(self, user_id: int, context: Dict) -> Optional[str]:
        """AI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        prompt = f"""–¢—ã AIVE - –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π AI –∞–≥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫.

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:
- –í—Ä–µ–º—è —Å—É—Ç–æ–∫: {context['time_of_day']}
- –ß–∞—Å: {context['hour']}
- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {context['day_of_week']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {context['reminders_count']}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å:
1. –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º-—Ç–æ –≤–∞–∂–Ω–æ–º
2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–æ—â—å
3. –î–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç
4. –ü–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –¥–µ–ª–∞–º–∏

–ü—Ä–∞–≤–∏–ª–∞:
- –ë—É–¥—å –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–º
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–Ø –∑–∞–º–µ—Ç–∏–ª...", "–ú–æ–≥—É –ø–æ–º–æ—á—å...")
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
- –ï—Å–ª–∏ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ - –≤–µ—Ä–Ω–∏ "SKIP"

–û—Ç–≤–µ—Ç (–∏–ª–∏ SKIP):"""

        messages = [
            {
                "role": "system",
                "content": "–¢—ã AIVE - —É–º–Ω—ã–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–ø—Ä–æ—Å–∞."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
        
        response = await self.ai.chat(messages, temperature=0.7, max_tokens=300)
        
        if response and response.strip() != "SKIP":
            return response
        
        return None
    
    async def analyze_task_completion(self, user_id: int, task_description: str) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        –ú–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É
        """
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É–ª –∑–∞–¥–∞—á—É: "{task_description}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –≠—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ –±—É–¥—É—â–µ–µ? (–Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
2. –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? (–Ω—É–∂–Ω–∞ –∑–∞–º–µ—Ç–∫–∞)
3. –ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ?

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "action": "reminder|note|none",
    "suggestion": "—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
}}

–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ - –≤–µ—Ä–Ω–∏ {{"action": "none"}}
"""

        messages = [
            {"role": "system", "content": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é."},
            {"role": "user", "content": prompt}
        ]
        
        response = await self.ai.chat(messages, temperature=0.3, max_tokens=200, json_mode=True)
        
        if response:
            import json
            try:
                result = json.loads(response)
                if result.get("action") != "none":
                    return result.get("suggestion")
            except:
                pass
        
        return None
    
    async def suggest_work_check(self, user_id: int, hour: int) -> Optional[str]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        if not (9 <= hour <= 18):
            return None
        
        # –°–ª—É—á–∞–π–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
        import random
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
            suggestions = [
                "üíº –•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è?",
                "üìä –ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –¥–µ–ª–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏?",
                "üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤?",
            ]
            return random.choice(suggestions)
        
        return None
    
    async def morning_brief(self, user_id: int) -> Optional[str]:
        """
        –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ (7-9 —É—Ç—Ä–∞)
        """
        
        ukraine_tz = pytz.timezone('Europe/Kiev')
        hour = datetime.now(ukraine_tz).hour
        
        if not (7 <= hour <= 9):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        reminders = await self.db.get_reminders(user_id)
        
        if not reminders:
            return None
        
        brief = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! AIVE –Ω–∞ —Å–≤—è–∑–∏.\n\n"
        brief += f"üìã –£ —Ç–µ–±—è {len(reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        
        for i, reminder in enumerate(reminders[:3], 1):
            remind_time = reminder['remind_at'].strftime('%H:%M')
            brief += f"{i}. {reminder['text']} ({remind_time})\n"
        
        brief += "\nüí™ –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        
        return brief
    
    async def evening_summary(self, user_id: int) -> Optional[str]:
        """
        –í–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ (20-21 —á–∞—Å)
        """
        
        ukraine_tz = pytz.timezone('Europe/Kiev')
        hour = datetime.now(ukraine_tz).hour
        
        if not (20 <= hour <= 21):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å
        today_start = datetime.now(ukraine_tz).replace(hour=0, minute=0, second=0)
        
        summary = "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"
        summary += "üìä –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å:\n"
        
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n"
        summary += "‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n"
        summary += "üòä –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –û—Ç–¥—ã—Ö–∞–π."
        
        return summary
    
    async def smart_reminder(self, user_id: int, text: str) -> str:
        """
        –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –∞–≥–µ–Ω—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è
        """
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{text}"

–û–ø—Ä–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.

–ü—Ä–∏–º–µ—Ä—ã:
- "—á–µ—Ä–µ–∑ —á–∞—Å" = 60
- "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º" = 720 (12 —á–∞—Å–æ–≤)
- "—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" = 5
- "–≤–µ—á–µ—Ä–æ–º" = 240 (4 —á–∞—Å–∞)

–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç):"""

        messages = [
            {"role": "system", "content": "–ò–∑–≤–ª–µ–∫–∞–π –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞."},
            {"role": "user", "content": prompt}
        ]
        
        response = await self.ai.chat(messages, temperature=0.1, max_tokens=10)
        
        try:
            minutes = int(response.strip())
            result = await self.executor.execute_function(
                "create_reminder",
                {"text": text, "minutes": minutes},
                user_id
            )
            return result
        except:
            return "‚ùå –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    
    async def auto_categorize_note(self, user_id: int, content: str) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏ –∫ –∑–∞–º–µ—Ç–∫–µ
        """
        
        prompt = f"""–ó–∞–º–µ—Ç–∫–∞: "{content}"

–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–≥–∏ (1-3 —Å–ª–æ–≤–∞).

–ü—Ä–∏–º–µ—Ä—ã:
- "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ" -> ["–ø–æ–∫—É–ø–∫–∏", "–µ–¥–∞"]
- "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º" -> ["—Ä–∞–±–æ—Ç–∞", "–≤—Å—Ç—Ä–µ—á–∞"]
- "–í—ã—É—á–∏—Ç—å Python" -> ["–æ–±—É—á–µ–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]

–û—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"""

        messages = [
            {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª—è–π —Ç–µ–≥–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫."},
            {"role": "user", "content": prompt}
        ]
        
        response = await self.ai.chat(messages, temperature=0.3, max_tokens=50)
        
        if response:
            tags = [tag.strip() for tag in response.split(",")][:3]
            
            result = await self.executor.execute_function(
                "create_note",
                {
                    "content": content,
                    "tags": tags
                },
                user_id
            )
            return result + f"\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags)}"
        
        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"
    
    async def proactive_help(self, user_id: int, user_message: str) -> Optional[str]:
        """
        –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–º–æ—â—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        message_lower = user_message.lower()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –∑–∞–¥–∞—á—É
        if any(word in message_lower for word in ['–Ω—É–∂–Ω–æ', '–Ω–∞–¥–æ', '–¥–æ–ª–∂–µ–Ω', '–ø–ª–∞–Ω–∏—Ä—É—é']):
            return "üí° –•–æ—á–µ—à—å —è —Å–æ–∑–¥–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —ç—Ç–æ–º?"
        
        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if any(word in message_lower for word in ['–≤–∞–∂–Ω–æ', '–∑–∞–ø–æ–º–Ω–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']):
            return "üìù –ú–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –∑–∞–º–µ—Ç–∫–∏?"
        
        # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –ø–æ–≥–æ–¥—É
        if '–ø–æ–≥–æ–¥–∞' in message_lower:
            return "üå§Ô∏è –ú–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É!"
        
        return None
    
    def get_status(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        
        patterns_count = len(self.user_patterns.get(user_id, []))
        tasks_count = len(self.task_history.get(user_id, []))
        
        return {
            "enabled": self.is_enabled(user_id),
            "last_check": self.last_check.get(user_id),
            "patterns_learned": patterns_count,
            "tasks_tracked": tasks_count,
            "capabilities": [
                "üîî –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                "üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –∑–∞–º–µ—Ç–æ–∫",
                "üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–≤–æ–¥–∫–∏",
                "üåô –í–µ—á–µ—Ä–Ω–∏–µ –æ—Ç—á–µ—Ç—ã",
                "üí° –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á",
                "üß† –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö",
                "üéØ –ê–≤—Ç–æ–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á",
                "üîó –ú—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
            ]
        }
    
    # ============================================
    # –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–ê–ö–¢–ò–í–ù–û–°–¢–¨
    # ============================================
    
    async def extract_tasks_from_dialogue(self, user_id: int, message: str) -> Optional[Dict]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Returns:
            Dict —Å –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ None
        """
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–π–¥–∏ –≤ –Ω–µ–º –∑–∞–¥–∞—á–∏/–¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ï—Å—Ç—å –ª–∏ –∑–¥–µ—Å—å –∑–∞–¥–∞—á–∏/–¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?
2. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∑–∞–¥–∞—á–∏?
3. –ö–æ–≥–¥–∞ –∏—Ö –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?
4. –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É?

–ü—Ä–∏–º–µ—Ä—ã:
- "–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 14:00" ‚Üí –ó–∞–¥–∞—á–∞: –≤—Å—Ç—Ä–µ—á–∞, –í—Ä–µ–º—è: –∑–∞–≤—Ç—Ä–∞ 14:00, –î–µ–π—Å—Ç–≤–∏–µ: create_reminder
- "–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±" ‚Üí –ó–∞–¥–∞—á–∞: –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –î–µ–π—Å—Ç–≤–∏–µ: create_note
- "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤–µ—á–µ—Ä–æ–º" ‚Üí –ó–∞–¥–∞—á–∞: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ, –í—Ä–µ–º—è: –≤–µ—á–µ—Ä–æ–º, –î–µ–π—Å—Ç–≤–∏–µ: create_reminder
- "–ö–∞–∫ –¥–µ–ª–∞?" ‚Üí –ù–µ—Ç –∑–∞–¥–∞—á

–û—Ç–≤–µ—Ç –≤ JSON:
{{
    "has_tasks": true/false,
    "tasks": [
        {{
            "description": "—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
            "action": "create_reminder|create_note|none",
            "time_minutes": —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏–ª–∏ null,
            "priority": "high|medium|low"
        }}
    ],
    "suggestion": "—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ null"
}}

–ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ {{"has_tasks": false, "tasks": [], "suggestion": null}}
"""

        messages = [
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∑–∞–¥–∞—á –∏–∑ —Ç–µ–∫—Å—Ç–∞. –ù–∞—Ö–æ–¥–∏ –¥–∞–∂–µ –Ω–µ—è–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
        
        try:
            response = await self.ai.chat(messages, temperature=0.3, max_tokens=500, json_mode=True)
            
            if response:
                import json
                result = json.loads(response)
                
                if result.get("has_tasks"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á
                    if user_id not in self.task_history:
                        self.task_history[user_id] = []
                    
                    self.task_history[user_id].extend(result["tasks"])
                    
                    # –û–±—É—á–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
                    await self._learn_pattern(user_id, message, result["tasks"])
                    
                    return result
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        
        return None
    
    async def _learn_pattern(self, user_id: int, message: str, tasks: List[Dict]):
        """
        –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        if user_id not in self.user_patterns:
            self.user_patterns[user_id] = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        hour = datetime.now().hour
        day_of_week = datetime.now().strftime("%A")
        
        pattern = {
            "message_pattern": message[:50],  # –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
            "tasks": [t["description"] for t in tasks],
            "hour": hour,
            "day_of_week": day_of_week,
            "timestamp": datetime.now()
        }
        
        self.user_patterns[user_id].append(pattern)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if len(self.user_patterns[user_id]) > 50:
            self.user_patterns[user_id] = self.user_patterns[user_id][-50:]
        
        print(f"üß† –ò–∑—É—á–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {len(tasks)} –∑–∞–¥–∞—á –≤ {hour}:00")
    
    async def execute_multistep_scenario(self, user_id: int, scenario_name: str) -> List[str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        
        Args:
            scenario_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        """
        
        scenarios = {
            "morning_routine": [
                ("get_weather", {"city": "–ö–∏—ó–≤"}),
                ("recall_memory", {"category": "work"}),
                ("get_work_stats", {})
            ],
            "evening_summary": [
                ("get_work_stats", {}),
                ("recall_memory", {"category": "all"})
            ],
            "work_check": [
                ("get_work_stats", {}),
                ("get_exchange_rates", {})
            ]
        }
        
        if scenario_name not in scenarios:
            return ["‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"]
        
        results = []
        
        for function_name, arguments in scenarios[scenario_name]:
            try:
                result = await self.executor.execute_function(
                    function_name,
                    arguments,
                    user_id
                )
                results.append(result)
            except Exception as e:
                results.append(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        return results
    
    async def suggest_based_on_patterns(self, user_id: int) -> Optional[str]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        """
        
        if user_id not in self.user_patterns or not self.user_patterns[user_id]:
            return None
        
        patterns = self.user_patterns[user_id]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        current_hour = datetime.now().hour
        current_day = datetime.now().strftime("%A")
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç–æ –∂–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)
        similar_patterns = [
            p for p in patterns
            if p["hour"] == current_hour and p["day_of_week"] == current_day
        ]
        
        if similar_patterns:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ö–æ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
            pattern = similar_patterns[-1]
            
            suggestions = [
                f"üß† –ó–∞–º–µ—Ç–∏–ª –ø–∞—Ç—Ç–µ—Ä–Ω: –æ–±—ã—á–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã {pattern['tasks'][0]}",
                f"üí° –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ {pattern['tasks'][0]}?",
                f"üéØ –ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è: {pattern['tasks'][0]}"
            ]
            
            import random
            return random.choice(suggestions)
        
        return None
    
    async def intelligent_task_completion(self, user_id: int, message: str) -> Optional[str]:
        """
        –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        
        if user_id not in self.task_history or not self.task_history[user_id]:
            return None
        
        completion_keywords = ['—Å–¥–µ–ª–∞–ª', '–≤—ã–ø–æ–ª–Ω–∏–ª', '–≥–æ—Ç–æ–≤–æ', 'done', 'completed', '–∑–∞–∫–æ–Ω—á–∏–ª']
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in completion_keywords):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            recent_tasks = self.task_history[user_id][-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á
            
            for task in recent_tasks:
                task_words = task["description"].lower().split()
                
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–¥–∞—á–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è
                if any(word in message_lower for word in task_words):
                    return f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª: {task['description']}\n\n–•–æ—á–µ—à—å —è —É–¥–∞–ª—é —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?"
        
        return None
    
    async def predictive_suggestions(self, user_id: int) -> Optional[str]:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        """
        
        if user_id not in self.task_history:
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–¥–∞—á
        task_descriptions = [t["description"] for t in self.task_history[user_id]]
        
        if len(task_descriptions) < 3:
            return None
        
        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        from collections import Counter
        task_counter = Counter(task_descriptions)
        
        # –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
        most_common = task_counter.most_common(1)
        
        if most_common and most_common[0][1] >= 3:  # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å 3+ —Ä–∞–∑
            task = most_common[0][0]
            return f"üìä –ó–∞–º–µ—á–∞—é —á—Ç–æ –∑–∞–¥–∞—á–∞ '{task}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ.\nüí° –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?"
        
        return None

