"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://api-docs.deepseek.com/
"""
import aiohttp
import asyncio
import json
from typing import List, Dict, Optional, AsyncIterator, Any
import config


class AIService:
    """
    DeepSeek API –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:
    - deepseek-chat (non-thinking mode)
    - deepseek-reasoner (thinking mode)
    - Streaming
    - Function calling
    - JSON output
    - Context caching
    """
    
    def __init__(self, api_key: str = None, model: str = None):
        self.api_key = api_key or config.DEEPSEEK_API_KEY
        self.model = model or config.DEEPSEEK_MODEL
        self.api_url = config.DEEPSEEK_API_URL
        self.reasoning_model = "deepseek-reasoner"  # Thinking mode
        
    async def chat(self, 
                   messages: List[Dict[str, str]], 
                   temperature: float = 0.7,
                   max_tokens: int = 2000,
                   stream: bool = False,
                   json_mode: bool = False,
                   functions: Optional[List[Dict]] = None,
                   use_reasoning: bool = False) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π [{"role": "user/assistant/system", "content": "..."}]
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-2.0)
            max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            stream: –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            json_mode: –í–∫–ª—é—á–∏—Ç—å JSON —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞
            functions: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è function calling
            use_reasoning: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deepseek-reasoner (thinking mode)
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model = self.reasoning_model if use_reasoning else self.model
        
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "stream": stream
        }
        
        # JSON mode
        if json_mode:
            payload["response_format"] = {"type": "json_object"}
        
        # Function calling
        if functions:
            payload["functions"] = functions
            payload["function_call"] = "auto"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    json=payload,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=120)  # –ë–æ–ª—å—à–µ –¥–ª—è reasoning
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reasoning content (–¥–ª—è deepseek-reasoner)
                        message = data['choices'][0]['message']
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å function_call - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if 'function_call' in message:
                            return message
                        
                        if 'reasoning_content' in message and message['reasoning_content']:
                            # Reasoning mode - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è, –∏ –æ—Ç–≤–µ—Ç
                            reasoning = message['reasoning_content']
                            content = message.get('content', '')
                            return f"ü§î –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n{reasoning}\n\nüí° –û—Ç–≤–µ—Ç:\n{content}"
                        else:
                            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                            return message.get('content')
                    else:
                        error_text = await response.text()
                        print(f"‚ùå DeepSeek API Error: {response.status} - {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            print("‚ùå DeepSeek API Timeout")
            return None
        except Exception as e:
            print(f"‚ùå DeepSeek API Exception: {e}")
            return None
    
    async def chat_with_context(self, user_message: str, 
                                context_messages: List[Dict[str, str]],
                                system_prompt: str = None) -> Optional[str]:
        """
        –ß–∞—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            user_message: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_messages: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç–≤–µ—Ç –ò–ò
        """
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        else:
            messages.append({"role": "system", "content": config.SYSTEM_PROMPT})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        for msg in context_messages[-config.MAX_CONTEXT_MESSAGES:]:
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({"role": "user", "content": user_message})
        
        return await self.chat(messages)
    
    async def summarize_text(self, text: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞"""
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n{text}"}
        ]
        return await self.chat(messages, temperature=0.3)
    
    async def extract_facts(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        messages = [
            {
                "role": "system", 
                "content": "–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –¥–∞—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å. –û—Ç–≤–µ—á–∞–π —Å–ø–∏—Å–∫–æ–º —Ñ–∞–∫—Ç–æ–≤."
            },
            {"role": "user", "content": text}
        ]
        return await self.chat(messages, temperature=0.2, max_tokens=500)
    
    async def reasoning_chat(self, user_message: str, 
                            context_messages: List[Dict[str, str]] = None,
                            system_prompt: str = None) -> Optional[str]:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç deepseek-reasoner (thinking mode) –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        
        Args:
            user_message: –í–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á–∞
            context_messages: –ò—Å—Ç–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        """
        messages = []
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        else:
            messages.append({
                "role": "system", 
                "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è."
            })
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        if context_messages:
            for msg in context_messages[-5:]:  # –ú–µ–Ω—å—à–µ –¥–ª—è reasoning
                messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
        
        # –í–æ–ø—Ä–æ—Å
        messages.append({"role": "user", "content": user_message})
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º reasoning mode
        return await self.chat(messages, temperature=0.7, use_reasoning=True, max_tokens=4000)
    
    async def extract_json(self, text: str, schema_description: str) -> Optional[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            schema_description: –û–ø–∏—Å–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        messages = [
            {
                "role": "system",
                "content": f"–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä–Ω–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {schema_description}"
            },
            {"role": "user", "content": text}
        ]
        
        response = await self.chat(messages, temperature=0.1, json_mode=True, max_tokens=1000)
        
        if response:
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞")
                return None
        return None
    
    async def analyze_with_reasoning(self, task: str, data: str = None) -> Optional[str]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º reasoning mode
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á: –∫–æ–¥ —Ä–µ–≤—å—é, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
        
        Args:
            task: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
        """
        prompt = task
        if data:
            prompt += f"\n\n–î–∞–Ω–Ω—ã–µ:\n{data}"
        
        messages = [
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢—â–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—É–∂–¥–∞–π –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–∏—Ö–æ–¥–∏ –∫ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é."
            },
            {"role": "user", "content": prompt}
        ]
        
        return await self.chat(messages, temperature=0.6, use_reasoning=True, max_tokens=4000)

