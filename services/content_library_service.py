"""
–°–µ—Ä–≤–∏—Å —É–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""
import re
import json
from typing import Optional, Dict, List, Tuple
from pathlib import Path

from database import Database
from services import AIService
from services.vision_service import VisionService


class ContentLibraryService:
    """
    –£–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
    - image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞—Ä—Ç—ã, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Ñ–æ—Ç–æ)
    - text: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    - code: –ö–æ–¥ (Python, JS, –∏ —Ç.–¥.)
    - link: –°—Å—ã–ª–∫–∏ (YouTube, —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ)
    - document: –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX –∏ —Ç.–¥.)
    - audio: –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã
    - video: –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (AI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):
    - maps: –ö–∞—Ä—Ç—ã, —Å—Ö–µ–º—ã –ø—Ä–æ–µ–∑–¥–∞
    - funny: –°–º–µ—à–Ω–æ–µ (–º–µ–º—ã, –≤–∏–¥–µ–æ)
    - useful: –ü–æ–ª–µ–∑–Ω–æ–µ (—Å—Ç–∞—Ç—å–∏, —Ç—É—Ç–æ—Ä–∏–∞–ª—ã)
    - work: –†–∞–±–æ—á–µ–µ
    - personal: –õ–∏—á–Ω–æ–µ
    - code: –ö–æ–¥ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    - docs: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - reference: –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    CATEGORIES = {
        "maps": "üó∫Ô∏è –ö–∞—Ä—Ç—ã –∏ —Å—Ö–µ–º—ã",
        "funny": "üòÇ –°–º–µ—à–Ω–æ–µ",
        "useful": "üí° –ü–æ–ª–µ–∑–Ω–æ–µ",
        "work": "üíº –†–∞–±–æ—Ç–∞",
        "personal": "üë§ –õ–∏—á–Ω–æ–µ",
        "code": "üíª –ö–æ–¥",
        "docs": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        "reference": "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
        "media": "üé¨ –ú–µ–¥–∏–∞",
        "other": "üìÇ –î—Ä—É–≥–æ–µ"
    }
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
    CODE_EXTENSIONS = {'.py', '.js', '.ts', '.jsx', '.tsx', '.java', '.cpp', '.c', '.h', '.cs', 
                      '.php', '.rb', '.go', '.rs', '.swift', '.kt', '.sql', '.sh', '.bash'}
    
    def __init__(self, db: Database, ai: AIService, vision: VisionService):
        self.db = db
        self.ai = ai
        self.vision = vision
        
    async def analyze_and_save(
        self,
        user_id: int,
        content_type: str,
        **kwargs
    ) -> Tuple[int, Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (file_id, url, text_content –∏ —Ç.–¥.)
            
        Returns:
            (content_id, ai_analysis) - ID –∑–∞–ø–∏—Å–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AI
        analysis = await self._analyze_content(content_type, **kwargs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        content_id = await self.db.save_content(
            user_id=user_id,
            content_type=content_type,
            description=analysis.get('description'),
            category=analysis.get('category'),
            **kwargs
        )
        
        return content_id, analysis
    
    async def _analyze_content(
        self,
        content_type: str,
        file_id: str = None,
        url: str = None,
        text_content: str = None,
        image_bytes: bytes = None,
        file_name: str = None,
        **kwargs
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        
        Returns:
            {
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "category": "maps|funny|useful|...",
                "suggested_title": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2"]
            }
        """
        
        # === –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
        if content_type == "image" and image_bytes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            vision_result = await self.vision.analyze_image(
                image_bytes,
                prompt="–û–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –≠—Ç–æ –∫–∞—Ä—Ç–∞? –ú–µ–º? –°–∫—Ä–∏–Ω—à–æ—Ç? –§–æ—Ç–æ?"
            )
            
            # AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç Gemini
            return await self._categorize_by_description(vision_result, content_type)
        
        # === –¢–ï–ö–°–¢ / –ö–û–î ===
        elif content_type in ["text", "code"] and text_content:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ –∫–æ–¥ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            is_code = self._detect_code(text_content, file_name)
            actual_type = "code" if is_code else "text"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç {"–∫–æ–¥" if is_code else "—Ç–µ–∫—Å—Ç"}:

{text_content[:500]}...

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ß—Ç–æ —ç—Ç–æ? (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
2. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: maps, funny, useful, work, personal, code, docs, reference, media, other
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (2-5 —Å–ª–æ–≤)
4. –¢–µ–≥–∏ (2-4 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞)

–û—Ç–≤–µ—Ç –≤ JSON:
{{
    "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "suggested_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2"]
}}"""

            messages = [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON."},
                {"role": "user", "content": prompt}
            ]
            
            response = await self.ai.chat(messages, temperature=0.3, max_tokens=200, json_mode=True)
            
            if response:
                try:
                    result = json.loads(response)
                    result['content_type'] = actual_type  # –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø
                    return result
                except:
                    pass
        
        # === –°–°–´–õ–ö–ò ===
        elif content_type == "link" and url:
            return await self._analyze_link(url)
        
        # === FALLBACK ===
        return {
            "description": f"–ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ {content_type}",
            "category": "other",
            "suggested_title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "tags": []
        }
    
    async def _categorize_by_description(self, description: str, content_type: str) -> Dict:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        prompt = f"""–£ –Ω–∞—Å –µ—Å—Ç—å {content_type} —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:

"{description}"

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞—Ç–µ–≥–æ—Ä–∏—é: maps (–∫–∞—Ä—Ç—ã), funny (—Å–º–µ—à–Ω–æ–µ), useful (–ø–æ–ª–µ–∑–Ω–æ–µ), work (—Ä–∞–±–æ—Ç–∞), personal (–ª–∏—á–Ω–æ–µ), code (–∫–æ–¥), docs (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è), reference (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫), media (–º–µ–¥–∏–∞), other (–¥—Ä—É–≥–æ–µ)
2. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (2-5 —Å–ª–æ–≤)
3. –î–æ–±–∞–≤—å 2-4 —Ç–µ–≥–∞

–û—Ç–≤–µ—Ç –≤ JSON:
{{
    "description": "{description[:100]}...",
    "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "suggested_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
    "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2"]
}}"""

        messages = [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON."},
            {"role": "user", "content": prompt}
        ]
        
        response = await self.ai.chat(messages, temperature=0.3, max_tokens=150, json_mode=True)
        
        if response:
            try:
                result = json.loads(response)
                result['description'] = description  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                return result
            except:
                pass
        
        # Fallback
        return {
            "description": description,
            "category": "other",
            "suggested_title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "tags": []
        }
    
    async def _analyze_link(self, url: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –ø–æ URL
        url_lower = url.lower()
        
        if any(domain in url_lower for domain in ['youtube.com', 'youtu.be', 'vimeo.com']):
            category = "media"
            description = "–í–∏–¥–µ–æ"
            suggested_title = "–í–∏–¥–µ–æ —Å " + self._extract_domain(url)
        
        elif any(domain in url_lower for domain in ['github.com', 'gitlab.com', 'stackoverflow.com']):
            category = "code"
            description = "–ö–æ–¥ / –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            suggested_title = "–°—Å—ã–ª–∫–∞ –Ω–∞ " + self._extract_domain(url)
        
        elif any(domain in url_lower for domain in ['wikipedia.org', 'docs.', 'documentation']):
            category = "docs"
            description = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / –°—Ç–∞—Ç—å—è"
            suggested_title = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        
        else:
            category = "reference"
            description = f"–°—Å—ã–ª–∫–∞ –Ω–∞ {self._extract_domain(url)}"
            suggested_title = self._extract_domain(url)
        
        return {
            "description": description,
            "category": category,
            "suggested_title": suggested_title,
            "tags": [self._extract_domain(url)]
        }
    
    async def smart_search(self, user_id: int, query: str) -> List[Dict]:
        """
        –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å AI –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –ó–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ ("–¥–∞–π –∫–∞—Ä—Ç—É –º–µ—Ç—Ä–æ", "–ø–æ–∫–∞–∂–∏ —Å–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ")
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        # AI –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        search_params = await self._parse_search_query(query)
        
        # –ò—â–µ–º –≤ –ë–î
        results = await self.db.get_content(
            user_id=user_id,
            content_type=search_params.get('content_type'),
            category=search_params.get('category'),
            search=search_params.get('keywords'),
            limit=search_params.get('limit', 20)
        )
        
        return results
    
    async def _parse_search_query(self, query: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI
        
        Returns:
            {
                "content_type": "image|text|code|link|...",
                "category": "maps|funny|...",
                "keywords": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                "limit": 10
            }
        """
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –≤ —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

"{query}"

–û–ø—Ä–µ–¥–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:
- content_type: image, text, code, link, video, document (–∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ)
- category: maps, funny, useful, work, personal, code, docs, reference, media, other (–∏–ª–∏ null)
- keywords: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–æ–ø–∏—Å–∞–Ω–∏—é
- limit: —Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å (10-50)

–ü—Ä–∏–º–µ—Ä—ã:
- "–¥–∞–π –∫–∞—Ä—Ç—É –º–µ—Ç—Ä–æ" ‚Üí {{"content_type": "image", "category": "maps", "keywords": "–º–µ—Ç—Ä–æ", "limit": 10}}
- "–ø–æ–∫–∞–∂–∏ —Å–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ" ‚Üí {{"content_type": "link", "category": "funny", "keywords": "–≤–∏–¥–µ–æ", "limit": 20}}
- "–Ω–∞–π–¥–∏ –∫–æ–¥ –ø–æ API" ‚Üí {{"content_type": "code", "category": null, "keywords": "API", "limit": 10}}

–û—Ç–≤–µ—Ç JSON:
{{
    "content_type": null_–∏–ª–∏_—Ç–∏–ø,
    "category": null_–∏–ª–∏_–∫–∞—Ç–µ–≥–æ—Ä–∏—è,
    "keywords": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
    "limit": —á–∏—Å–ª–æ
}}"""

        messages = [
            {"role": "system", "content": "–¢—ã –ø–∞—Ä—Å–∏—à—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON."},
            {"role": "user", "content": prompt}
        ]
        
        response = await self.ai.chat(messages, temperature=0.2, max_tokens=100, json_mode=True)
        
        if response:
            try:
                return json.loads(response)
            except:
                pass
        
        # Fallback - –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        return {
            "content_type": None,
            "category": None,
            "keywords": query,
            "limit": 20
        }
    
    def _detect_code(self, text: str, file_name: str = None) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–¥–æ–º"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if file_name:
            ext = Path(file_name).suffix.lower()
            if ext in self.CODE_EXTENSIONS:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        code_patterns = [
            r'def\s+\w+\s*\(',  # Python functions
            r'function\s+\w+\s*\(',  # JS functions
            r'class\s+\w+',  # Classes
            r'import\s+\w+',  # Imports
            r'from\s+\w+\s+import',  # Python imports
            r'#include\s*<',  # C/C++ includes
            r'package\s+\w+',  # Java/Go packages
            r'=>',  # Arrow functions
            r'\{\s*\n\s*\w+:',  # JSON/objects
        ]
        
        for pattern in code_patterns:
            if re.search(pattern, text):
                return True
        
        return False
    
    def _extract_domain(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL"""
        import re
        match = re.search(r'(?:https?://)?(?:www\.)?([^/]+)', url)
        if match:
            domain = match.group(1)
            # –£–±–∏—Ä–∞–µ–º .com, .org –∏ —Ç.–¥. –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            return domain.split('.')[0].title()
        return "–°—Å—ã–ª–∫–∞"
    
    async def get_library_stats(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        stats = await self.db.get_content_stats(user_id)
        categories = await self.db.get_categories(user_id)
        
        if not stats:
            return "üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!"
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        type_icons = {
            "image": "üñºÔ∏è",
            "text": "üìù",
            "code": "üíª",
            "link": "üîó",
            "video": "üé¨",
            "document": "üìÑ",
            "audio": "üéµ"
        }
        
        total = sum(stats.values())
        
        result = f"üìö <b>–¢–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</b>\n\n"
        result += f"üìä <b>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</b> {total}\n\n"
        
        result += "<b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for content_type, count in sorted(stats.items(), key=lambda x: -x[1]):
            icon = type_icons.get(content_type, "üìÅ")
            result += f"{icon} {content_type.title()}: {count}\n"
        
        if categories:
            result += f"\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
            for cat in categories[:8]:  # –¢–æ–ø 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                emoji = self.CATEGORIES.get(cat, "üìÇ").split()[0]
                result += f"{emoji} {cat.title()} "
            if len(categories) > 8:
                result += f"\n+ –µ—â–µ {len(categories) - 8}"
        
        return result
    
    async def should_auto_save(
        self,
        content_type: str,
        text: str = None,
        caption: str = None,
        file_name: str = None
    ) -> Dict:
        """
        –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        Args:
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (image, text, link, document)
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
            file_name: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            {
                "should_save": bool,
                "reason": str,
                "confidence": float  # 0.0-1.0
            }
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context_parts = []
        
        if content_type == "image":
            if caption:
                context_parts.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é: '{caption}'")
            else:
                context_parts.append("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏")
        
        elif content_type == "document":
            context_parts.append(f"–î–æ–∫—É–º–µ–Ω—Ç: {file_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}")
        
        elif content_type == "text":
            if text and len(text) < 50:
                return {"should_save": False, "reason": "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "confidence": 0.9}
            context_parts.append(f"–¢–µ–∫—Å—Ç: '{text[:200]}'")
        
        elif content_type == "link":
            context_parts.append(f"–°—Å—ã–ª–∫–∞: {text}")
        
        context = "\n".join(context_parts)
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç:

{context}

–û–ø—Ä–µ–¥–µ–ª–∏: —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É?

–°–û–•–†–ê–ù–Ø–¢–¨ –°–¢–û–ò–¢:
- –ö–∞—Ä—Ç—ã, —Å—Ö–µ–º—ã, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
- –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ, —Ç—É—Ç–æ—Ä–∏–∞–ª—ã)
- –ö–æ–¥, —Å–Ω–∏–ø–ø–µ—Ç—ã
- –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- –î–æ–∫—É–º–µ–Ω—Ç—ã
- –ö–æ–Ω—Ç–∞–∫—Ç—ã, –∞–¥—Ä–µ—Å–∞
- –†–µ—Ü–µ–ø—Ç—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

–ù–ï –°–û–•–†–ê–ù–Ø–¢–¨:
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ
- –í–æ–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É
- –ö–æ–º–∞–Ω–¥—ã
- –ú–µ–º—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)

–û—Ç–≤–µ—Ç JSON:
{{
    "should_save": true/false,
    "reason": "–ø–æ—á–µ–º—É –¥–∞/–Ω–µ—Ç (–∫—Ä–∞—Ç–∫–æ)",
    "confidence": 0.0-1.0
}}"""

        messages = [
            {"role": "system", "content": "–¢—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å—Ç–æ–∏—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON."},
            {"role": "user", "content": prompt}
        ]
        
        try:
            response = await self.ai.chat(messages, temperature=0.3, max_tokens=100, json_mode=True)
            
            if response:
                result = json.loads(response)
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        # Fallback - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "should_save": False,
            "reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å",
            "confidence": 0.5
        }

