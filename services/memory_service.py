"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –±–æ—Ç–∞
"""
from typing import List, Dict, Any, Optional
from database import Database
from .ai_service import AIService


class MemoryService:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é –±–æ—Ç–∞
    """
    
    def __init__(self, db: Database, ai_service: AIService):
        self.db = db
        self.ai = ai_service
    
    async def get_context_for_ai(self, user_id: int) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        memories = await self.db.recall(user_id)
        
        if not memories:
            return ""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        context_parts = []
        current_category = None
        category_facts = []
        
        for mem in memories:
            if mem['category'] != current_category:
                if category_facts:
                    category_name = current_category.replace("_", " ").title()
                    context_parts.append(f"{category_name}: {', '.join(category_facts)}")
                current_category = mem['category']
                category_facts = []
            
            category_facts.append(f"{mem['key']} - {mem['value']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category_facts:
            category_name = current_category.replace("_", " ").title()
            context_parts.append(f"{category_name}: {', '.join(category_facts)}")
        
        if context_parts:
            return "\n\n–ß—Ç–æ —è –∑–Ω–∞—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n" + "\n".join(context_parts)
        
        return ""
    
    async def remember_fact(self, user_id: int, category: str, 
                           key: str, value: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–∫—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (personal, work, preferences, etc)
            key: –ö–ª—é—á —Ñ–∞–∫—Ç–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
        """
        try:
            await self.db.remember(user_id, category, key, value)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            return False
    
    async def recall_facts(self, user_id: int, 
                          category: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏"""
        return await self.db.recall(user_id, category)
    
    async def forget_fact(self, user_id: int, category: str, key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–∫—Ç –∏–∑ –ø–∞–º—è—Ç–∏"""
        try:
            await self.db.forget(user_id, category, key)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    async def auto_remember_from_conversation(self, user_id: int, 
                                             conversation_text: str) -> Optional[List[str]]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
        facts_text = await self.ai.extract_facts(conversation_text)
        
        if not facts_text:
            return None
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        saved_facts = []
        lines = facts_text.strip().split('\n')
        
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # –§–æ—Ä–º–∞—Ç: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ"
            if ':' in line and '-' in line:
                try:
                    category_part, fact_part = line.split(':', 1)
                    category = category_part.strip().lower().replace(' ', '_')
                    
                    if '-' in fact_part:
                        key, value = fact_part.split('-', 1)
                        key = key.strip()
                        value = value.strip()
                        
                        await self.remember_fact(user_id, category, key, value)
                        saved_facts.append(f"{category}: {key} = {value}")
                except:
                    continue
        
        return saved_facts if saved_facts else None
    
    async def format_memory_for_display(self, user_id: int, 
                                       category: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        memories = await self.recall_facts(user_id, category)
        
        if not memories:
            return "üß† –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for mem in memories:
            cat = mem['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(f"  ‚Ä¢ {mem['key']}: {mem['value']}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        output = ["üß† **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å**\n"]
        for cat, facts in categories.items():
            cat_name = cat.replace('_', ' ').title()
            output.append(f"**{cat_name}:**")
            output.extend(facts)
            output.append("")
        
        return "\n".join(output)

