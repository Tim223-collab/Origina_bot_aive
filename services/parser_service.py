"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ Playwright
"""
from playwright.async_api import async_playwright, Browser, Page
from typing import Dict, List, Optional
import asyncio
import config


class WorkSiteParser:
    """
    –ü–∞—Ä—Å–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    """
    
    def __init__(self):
        self.url = config.WORK_SITE_URL
        self.username = config.WORK_SITE_USERNAME
        self.password = config.WORK_SITE_PASSWORD
        self.browser: Optional[Browser] = None
        self.context = None
        self.page: Optional[Page] = None
        self.is_logged_in = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        playwright = await async_playwright().start()
        self.browser = await playwright.chromium.launch(headless=True)
        self.context = await self.browser.new_context()
        self.page = await self.context.new_page()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.context:
            await self.context.close()
        if self.browser:
            await self.browser.close()
    
    async def login(self) -> bool:
        """
        –õ–æ–≥–∏–Ω–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è
        """
        if not self.page:
            await self.start()
        
        try:
            await self.page.goto(self.url, wait_until="networkidle")
            
            # –ñ–¥–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∞–π—Ç)
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
            username_input = await self.page.query_selector('input[type="text"], input[name*="user"], input[name*="login"]')
            password_input = await self.page.query_selector('input[type="password"]')
            
            if username_input and password_input:
                await username_input.fill(self.username)
                await password_input.fill(self.password)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                submit_button = await self.page.query_selector('button[type="submit"], input[type="submit"]')
                if submit_button:
                    await submit_button.click()
                    await self.page.wait_for_load_state("networkidle")
                    
                    self.is_logged_in = True
                    return True
            
            # –ï—Å–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã (–µ—Å—Ç—å cookies)
            if "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" in await self.page.content():
                self.is_logged_in = True
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
            return False
    
    async def parse_statistics(self, date: str = None) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.is_logged_in:
            if not await self.login():
                return None
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if date:
                date_input = await self.page.query_selector('input[type="date"]')
                if date_input:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã DD.MM.YYYY -> YYYY-MM-DD
                    parts = date.split('.')
                    if len(parts) == 3:
                        iso_date = f"{parts[2]}-{parts[1]}-{parts[0]}"
                        await date_input.fill(iso_date)
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                        apply_button = await self.page.query_selector('button:has-text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")')
                        if apply_button:
                            await apply_button.click()
                            await self.page.wait_for_load_state("networkidle")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–∏–Ω–∏–µ, –∑–µ–ª–µ–Ω—ã–µ, –≥–æ–ª—É–±—ã–µ, –∂–µ–ª—Ç—ã–µ –±–ª–æ–∫–∏)
            stats = {
                "total_records": 0,
                "total_sfs": 0,
                "total_sch": 0,
                "active_users": 0,
                "workers": []
            }
            
            # –ü–∞—Ä—Å–∏–º –≤–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = await self.page.query_selector_all('div[class*="card"], div[class*="stat"]')
            for card in cards[:4]:  # –ü–µ—Ä–≤—ã–µ 4 –∫–∞—Ä—Ç–æ—á–∫–∏
                text = await card.inner_text()
                if "–∑–∞–ø–∏—Å–µ–π" in text.lower():
                    stats["total_records"] = self._extract_number(text)
                elif "sfs" in text.lower():
                    stats["total_sfs"] = self._extract_number(text)
                elif "sch" in text.lower():
                    stats["total_sch"] = self._extract_number(text)
                elif "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" in text.lower():
                    stats["active_users"] = self._extract_number(text)
            
            # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            table_rows = await self.page.query_selector_all('table tbody tr')
            
            for row in table_rows:
                cells = await row.query_selector_all('td')
                if len(cells) >= 6:
                    worker_data = {}
                    
                    # –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    name_cell = cells[0]
                    name_text = await name_cell.inner_text()
                    lines = name_text.strip().split('\n')
                    worker_data['name'] = lines[0] if lines else "Unknown"
                    worker_data['username'] = lines[1] if len(lines) > 1 else ""
                    
                    # –ö–æ–º–∞–Ω–¥–∞
                    team_cell = cells[1]
                    team_text = await team_cell.inner_text()
                    worker_data['team'] = team_text.strip()
                    
                    # –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
                    date_cell = cells[2]
                    date_text = await date_cell.inner_text()
                    worker_data['date'] = date_text.strip()
                    
                    # SFS
                    sfs_cell = cells[4] if len(cells) > 4 else None
                    if sfs_cell:
                        sfs_text = await sfs_cell.inner_text()
                        worker_data['sfs'] = self._extract_number(sfs_text)
                    
                    # Only now
                    only_now_cell = cells[5] if len(cells) > 5 else None
                    if only_now_cell:
                        only_now_text = await only_now_cell.inner_text()
                        worker_data['only_now'] = self._extract_number(only_now_text)
                    
                    # SCH
                    sch_cell = cells[6] if len(cells) > 6 else None
                    if sch_cell:
                        sch_text = await sch_cell.inner_text()
                        worker_data['sch'] = self._extract_number(sch_text)
                    
                    stats['workers'].append(worker_data)
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _extract_number(self, text: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        numbers = re.findall(r'\d+', text)
        return int(numbers[0]) if numbers else 0
    
    async def get_quick_summary(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        stats = await self.parse_statistics()
        if not stats:
            return None
        
        summary = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**

üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö (SFS): {stats['total_sfs']}
üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ (SCH): {stats['total_sch']}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(stats['workers'])}

**–¢–æ–ø —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:**
"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ SFS
        top_workers = sorted(stats['workers'], 
                           key=lambda x: x.get('sfs', 0), 
                           reverse=True)[:5]
        
        for i, worker in enumerate(top_workers, 1):
            summary += f"{i}. {worker['name']} - {worker.get('sfs', 0)} SFS\n"
        
        return summary
    
    async def __aenter__(self):
        """Context manager support"""
        await self.start()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager support"""
        await self.close()

