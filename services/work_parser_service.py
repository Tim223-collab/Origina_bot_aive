"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å–∞–π—Ç–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞
"""
import asyncio
import json
from datetime import datetime, date
from typing import Dict, List, Optional, Any
from pathlib import Path
import logging

from playwright.async_api import async_playwright, Browser, Page, TimeoutError as PlaywrightTimeout

import config

logger = logging.getLogger(__name__)


class WorkParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self):
        self.base_url = config.WORK_SITE_URL or "http://91.228.153.202:8000"
        self.username = config.WORK_SITE_USERNAME or "Timofey"
        self.password = config.WORK_SITE_PASSWORD or "admin123"
        self.browser: Optional[Browser] = None
        self.screenshots_dir = config.DATA_DIR / "screenshots"
        self.screenshots_dir.mkdir(exist_ok=True)
        
        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        self.SELECTORS = {
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            "login_username": "input[name='username']",
            "login_password": "input[name='password']",
            "login_submit": "button[type='submit']",
            
            # –§–∏–ª—å—Ç—Ä—ã
            "date_filter": "input#report_date",
            "team_good_bunny": "button[data-team='2']",
            "team_velvet": "button[data-team='1']",
            
            # –¢–∞–±–ª–∏—Ü–∞
            "table_rows": "tbody tr",
            "worker_name": "td:nth-child(1) strong",
            "worker_username": "td:nth-child(1) small",
            "team_badge": "td:nth-child(2) .badge",
            "report_date": "td:nth-child(3) strong",
            "report_id": "td:nth-child(3) small",
            
            # –ò–∫–æ–Ω–∫–∏ —Å–∫–∞–º–∞
            "scam_icon_red": "td:nth-child(4) i.bi-x-circle-fill.text-danger",
            "scam_icon_yellow": "td:nth-child(4) i.bi-exclamation-triangle-fill.text-warning",
            "scam_icon_green": "td:nth-child(4) i.bi-check-circle-fill.text-success",
            "scam_details_btn": "td:nth-child(4) button[id^='blacklist-btn-']",
            
            # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            "sfs_badge": "td:nth-child(5) .badge",
            "only_now_badge": "td:nth-child(6) .badge",
            "sch_badge": "td:nth-child(7) .badge",
            "created_at": "td:nth-child(8) small",
            
            # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            "modal": "#blacklistModalDynamic",
            "modal_body": "#blacklistModalDynamic .modal-body",
            "modal_close": "#blacklistModalDynamic .btn-close",
        }
    
    async def _init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ Playwright"""
        if not self.browser:
            playwright = await async_playwright().start()
            # –î–ª—è Linux —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º chromium –≤ headless —Ä–µ–∂–∏–º–µ
            self.browser = await playwright.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--disable-gpu'
                ]
            )
            logger.info("‚úÖ Playwright –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω (headless mode)")
    
    async def _close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.browser:
            await self.browser.close()
            self.browser = None
            logger.info("üîí Playwright –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    async def _login(self, page: Page) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ"""
        try:
            login_url = f"{self.base_url}/auth/login"
            logger.info(f"üîê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_url}")
            
            await page.goto(login_url, wait_until="networkidle")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            await page.fill(self.SELECTORS["login_username"], self.username)
            await page.fill(self.SELECTORS["login_password"], self.password)
            
            # –ù–∞–∂–∏–º–∞–µ–º –≤–æ–π—Ç–∏
            await page.click(self.SELECTORS["login_submit"])
            
            # –ñ–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥)
            await page.wait_for_url("**/admin/**", timeout=10000)
            
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _wait_for_reports_load(self, page: Page):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            await page.wait_for_selector(self.SELECTORS["table_rows"], timeout=15000)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ blacklist (–∏–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è)
            await asyncio.sleep(3)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except PlaywrightTimeout:
            logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
    
    async def parse_reports(
        self,
        team: str = "Good Bunny",
        report_date: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        
        Args:
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ("Good Bunny", "Velvet", –∏–ª–∏ "all")
            report_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–æ–≤
        """
        try:
            await self._init_browser()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page = await self.browser.new_page()
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not await self._login(page):
                return {"success": False, "error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–æ–±–æ"
            reports_url = f"{self.base_url}/admin/reports"
            logger.info(f"üìä –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–æ–≤: {reports_url}")
            await page.goto(reports_url, wait_until="networkidle")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if not report_date:
                report_date = date.today().strftime("%Y-%m-%d")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ evaluate (–¥–ª—è input type="date" –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å value)
            try:
                await page.evaluate(f"""
                    const dateInput = document.querySelector('{self.SELECTORS["date_filter"]}');
                    if (dateInput) {{
                        dateInput.value = '{report_date}';
                        dateInput.dispatchEvent(new Event('change', {{ bubbles: true }}));
                    }}
                """)
                logger.info(f"üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {report_date}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã: {e}")
            
            # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã (–∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞)
            team_map = {
                "Good Bunny": "team_good_bunny",
                "good bunny": "team_good_bunny",
                "goodbunny": "team_good_bunny",
                "Velvet": "team_velvet",
                "velvet": "team_velvet",
            }
            
            team_selector = team_map.get(team.strip())
            if team_selector:
                await page.click(self.SELECTORS[team_selector])
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {team}")
            else:
                logger.info("‚ÑπÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            try:
                submit_btn = await page.query_selector('button[type="submit"]')
                if submit_btn:
                    await submit_btn.click()
                    logger.info("‚úÖ –§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    # –ñ–¥–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ submit
                    await page.wait_for_load_state("networkidle")
                    await asyncio.sleep(1)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: {e}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            await self._wait_for_reports_load(page)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            rows = await page.query_selector_all(self.SELECTORS["table_rows"])
            
            if not rows:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ (–Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É)")
                await page.close()
                return {
                    "success": True,
                    "date": report_date,
                    "team": team,
                    "workers_count": 0,
                    "workers": [],
                    "total_sfs": 0,
                    "total_sch": 0,
                    "scam_detected": 0
                }
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
            
            workers = []
            total_sfs = 0
            total_sch = 0
            scam_count = 0
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            for idx, row in enumerate(rows, 1):
                try:
                    worker_data = await self._parse_worker_row(row, page)
                    if worker_data:
                        workers.append(worker_data)
                        total_sfs += worker_data.get("sfs", 0)
                        total_sch += worker_data.get("sch", 0)
                        
                        if worker_data.get("has_scam"):
                            scam_count += 1
                        
                        logger.info(f"‚úÖ [{idx}/{len(rows)}] –°–ø–∞—Ä—Å–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫: {worker_data['name']}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
                    continue
            
            await page.close()
            
            result = {
                "success": True,
                "date": report_date,
                "team": team,
                "workers_count": len(workers),
                "workers": workers,
                "total_sfs": total_sfs,
                "total_sch": total_sch,
                "total_only_now": total_sfs - total_sch,
                "scam_detected": scam_count,
                "parsed_at": datetime.now().isoformat()
            }
            
            logger.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–∞–±–æ—Ç–Ω–∏–∫–æ–≤: {len(workers)}, SFS: {total_sfs}, SCH: {total_sch}, –°–∫–∞–º: {scam_count}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {"success": False, "error": str(e)}
        
        finally:
            await self._close_browser()
    
    async def _parse_worker_row(self, row, page: Page) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)"""
        try:
            # –ò–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
            name_elem = await row.query_selector(self.SELECTORS["worker_name"])
            name = await name_elem.inner_text() if name_elem else "Unknown"
            
            # Username (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
            username_elem = await row.query_selector(self.SELECTORS["worker_username"])
            username = await username_elem.inner_text() if username_elem else None
            if username:
                username = username.strip().lstrip("@")
            
            # –ö–æ–º–∞–Ω–¥–∞
            team_elem = await row.query_selector(self.SELECTORS["team_badge"])
            team = await team_elem.inner_text() if team_elem else "Unknown"
            
            # ID –æ—Ç—á–µ—Ç–∞
            id_elem = await row.query_selector(self.SELECTORS["report_id"])
            report_id_text = await id_elem.inner_text() if id_elem else "#0"
            report_id = int(report_id_text.strip("#"))
            
            # SFS
            sfs_elem = await row.query_selector(self.SELECTORS["sfs_badge"])
            sfs = int(await sfs_elem.inner_text()) if sfs_elem else 0
            
            # SCH
            sch_elem = await row.query_selector(self.SELECTORS["sch_badge"])
            sch = int(await sch_elem.inner_text()) if sch_elem else 0
            
            # Only Now
            only_now_elem = await row.query_selector(self.SELECTORS["only_now_badge"])
            only_now = int(await only_now_elem.inner_text()) if only_now_elem else (sfs - sch)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∞–º–∞
            scam_icon_red = await row.query_selector(self.SELECTORS["scam_icon_red"])
            scam_icon_yellow = await row.query_selector(self.SELECTORS["scam_icon_yellow"])
            scam_icon_green = await row.query_selector(self.SELECTORS["scam_icon_green"])
            
            has_scam = False
            scam_status = "clean"
            
            # –°–∫–∞–º = —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫ (—Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞—à–µ–ª —Å–∫–∞–º-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤)
            # –ñ–µ–ª—Ç—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ù–ï —Å–∫–∞–º!)
            if scam_icon_red:
                has_scam = True
                scam_status = "scam_detected"
            elif scam_icon_yellow:
                has_scam = False  # –≠—Ç–æ –Ω–µ —Å–∫–∞–º, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                scam_status = "suspicious"
            elif scam_icon_green:
                scam_status = "clean"
            
            worker_data = {
                "report_id": report_id,
                "name": name,
                "username": username,
                "team": team,
                "sfs": sfs,
                "sch": sch,
                "only_now": only_now,
                "has_scam": has_scam,
                "scam_status": scam_status
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∞–º - –ø–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏
            if has_scam:
                scam_details_btn = await row.query_selector(self.SELECTORS["scam_details_btn"])
                if scam_details_btn:
                    worker_data["scam_details"] = await self._parse_scam_details(
                        scam_details_btn, page, report_id, name
                    )
            
            return worker_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: {e}")
            return None
    
    async def _parse_scam_details(
        self, 
        button, 
        page: Page, 
        report_id: int,
        worker_name: str
    ) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Å–∫–∞–º–∞ (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
        """
        try:
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–µ—Ç–∞–ª–µ–π
            await button.click()
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await page.wait_for_selector(self.SELECTORS["modal"], timeout=5000)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            await asyncio.sleep(1)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            await page.evaluate("""
                const modal = document.querySelector('#blacklistModalDynamic .modal-dialog');
                if (modal) {
                    modal.style.transform = 'scale(0.75)';
                    modal.style.transformOrigin = 'top center';
                }
            """)
            await asyncio.sleep(0.5)
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal_body = await page.query_selector(self.SELECTORS["modal_body"])
            
            if modal_body:
                modal_text = await modal_body.inner_text()
                modal_html = await modal_body.inner_html()
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                screenshot_path = await self._take_screenshot_modal(
                    page, 
                    f"scam_{report_id}_{worker_name}"
                )
                
                details = {
                    "text": modal_text,
                    "html": modal_html,
                    "screenshot": screenshot_path
                }
            else:
                details = {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏"}
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            close_btn = await page.query_selector(self.SELECTORS["modal_close"])
            if close_btn:
                await close_btn.click()
                await asyncio.sleep(0.5)
            
            return details
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π —Å–∫–∞–º–∞: {e}")
            return {"error": str(e)}
    
    async def _take_screenshot(
        self, 
        page: Page, 
        name: str
    ) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{name}_{timestamp}.png"
            filepath = self.screenshots_dir / filename
            
            await page.screenshot(path=str(filepath), full_page=True)
            
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    async def _take_screenshot_modal(
        self, 
        page: Page, 
        name: str
    ) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π)"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{name}_{timestamp}.png"
            filepath = self.screenshots_dir / filename
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal = await page.query_selector(self.SELECTORS["modal"])
            
            if modal:
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                await modal.screenshot(path=str(filepath))
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            else:
                # Fallback: —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await page.screenshot(path=str(filepath), full_page=True)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç (full page) —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"{name}_{timestamp}_fallback.png"
                filepath = self.screenshots_dir / filename
                await page.screenshot(path=str(filepath))
                return str(filepath)
            except:
                return None
    
    async def get_worker_scam_screenshots(
        self, 
        worker_name: str, 
        team: str = "Good Bunny",
        report_date: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–∫–∞–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–ø–æ–∫–∞–∂–∏ —á—Ç–æ —Å–æ —Å–∫–∞–º–æ–º —É –ê–ª–µ–∫—Å–µ—è")
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç—ã
            reports = await self.parse_reports(team=team, report_date=report_date)
            
            if not reports["success"]:
                return reports
            
            # –ò—â–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
            worker = None
            for w in reports["workers"]:
                if worker_name.lower() in w["name"].lower():
                    worker = w
                    break
            
            if not worker:
                return {
                    "success": False,
                    "error": f"–†–∞–±–æ—Ç–Ω–∏–∫ '{worker_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–∞—Ö"
                }
            
            if not worker.get("has_scam"):
                return {
                    "success": True,
                    "worker": worker,
                    "message": f"–£ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ {worker['name']} –Ω–µ—Ç —Å–∫–∞–º–∞ ‚úÖ"
                }
            
            return {
                "success": True,
                "worker": worker,
                "scam_details": worker.get("scam_details"),
                "message": f"–ù–∞–π–¥–µ–Ω —Å–∫–∞–º —É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ {worker['name']} üö®"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–∫–∞–º–∞: {e}")
            return {"success": False, "error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_parser_service = None

def get_parser_service() -> WorkParserService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞"""
    global _parser_service
    if _parser_service is None:
        _parser_service = WorkParserService()
    return _parser_service

