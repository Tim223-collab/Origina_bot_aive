"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –ò–ò-–±–æ—Ç–∞
"""
import asyncio
import logging
import sys
import time
from datetime import datetime
from pathlib import Path

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    try:
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except (AttributeError, OSError):
        # –ï—Å–ª–∏ detach() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤ IDE –∏–ª–∏ systemd), 
        # –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ UTF-8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Python 3.7+
        pass

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

import config
from database import Database
from services import AIService, MemoryService, PersonalityService, ContentLibraryService
from services.extras_service import ExtrasService
from services.vision_service import VisionService
from services.agent_service import AIAgentService
from services.function_tools import FunctionExecutor
from services.work_parser_service import get_parser_service
from handlers.ai_handler import AIHandler
from handlers.work_handler import WorkHandler
from handlers.utils_handler import UtilsHandler
from handlers.extras_handler import ExtrasHandler
from handlers.menu_handler import MenuHandler
from handlers.image_handler import ImageHandler
from handlers.agent_handler import AgentHandler
from handlers.content_handler import ContentHandler
from keyboards import get_main_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = Database(config.DATABASE_PATH)
        self.ai = AIService()
        self.memory = MemoryService(self.db, self.ai)
        self.parser = get_parser_service()  # –ù–æ–≤—ã–π Playwright –ø–∞—Ä—Å–µ—Ä
        self.extras = ExtrasService()
        self.vision = VisionService()
        
        # Function executor –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        self.function_executor = FunctionExecutor(
            db=self.db,
            memory_service=self.memory,
            extras_service=self.extras,
            parser_service=self.parser
        )
        
        # AI –ê–≥–µ–Ω—Ç
        self.agent = AIAgentService(self.db, self.ai, self.function_executor)
        
        # –ñ–∏–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å AIVE ü§ñ‚ù§Ô∏è
        self.personality = PersonalityService(self.db, self.ai, self.memory)
        
        # –£–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üìö‚ú®
        self.content_library = ContentLibraryService(self.db, self.ai, self.vision)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.ai_handler = AIHandler(
            db=self.db, 
            ai=self.ai, 
            memory=self.memory,
            extras_service=self.extras,
            parser_service=self.parser,
            agent_service=self.agent,  # –ü–µ—Ä–µ–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            personality_service=self.personality  # –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        )
        self.work_handler = WorkHandler(self.db, self.parser)
        self.utils_handler = UtilsHandler(self.db, self.memory)
        self.extras_handler = ExtrasHandler(self.extras)
        self.menu_handler = MenuHandler()
        self.image_handler = ImageHandler(self.vision, self.ai)
        self.agent_handler = AgentHandler(self.agent)
        self.content_handler = ContentHandler(self.db, self.content_library)
        
        self.app = None
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        config.validate_config()
        
        # –ë–î –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π event loop –Ω–∞ Windows
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_handlers()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ job_queue –¥–æ—Å—Ç—É–ø–Ω–∞
        if self.app.job_queue:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            self.app.job_queue.run_repeating(
                self.check_reminders,
                interval=60,
                first=10
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –∞–≥–µ–Ω—Ç–∞
            self.app.job_queue.run_repeating(
                self.check_agent,
                interval=3600,  # –ö–∞–∂–¥—ã–π —á–∞—Å
                first=300  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ AIVE ü§ñ‚ù§Ô∏è
            self.app.job_queue.run_repeating(
                self.check_personality,
                interval=1800,  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (—Å —É—á–µ—Ç–æ–º —Ä–∞–Ω–¥–æ–º–∞ 20% = ~–∫–∞–∂–¥—ã–µ 2.5 —á–∞—Å–∞)
                first=600  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            )
            logger.info("‚úÖ Job queue –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞–≥–µ–Ω—Ç, –ª–∏—á–Ω–æ—Å—Ç—å)")
        else:
            logger.warning("‚ö†Ô∏è Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        logger.info(f"üìù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {config.ALLOWED_USER_IDS}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ –ø–æ–º–æ—â—å
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.utils_handler.help_command))
        
        # –ò–ò –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("clear", self.ai_handler.clear_context_command))
        self.app.add_handler(CommandHandler("summarize", self.ai_handler.summarize_command))
        self.app.add_handler(CommandHandler("think", self.ai_handler.think_command))
        
        # –†–∞–±–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("stats", self.work_handler.stats_command))
        self.app.add_handler(CommandHandler("workers", self.work_handler.workers_command))
        self.app.add_handler(CommandHandler("check", self.work_handler.check_worker_command))
        self.app.add_handler(CommandHandler("screenshot", self.work_handler.send_worker_screenshot))
        
        # –ü–∞–º—è—Ç—å
        self.app.add_handler(CommandHandler("remember", self.utils_handler.remember_command))
        self.app.add_handler(CommandHandler("recall", self.utils_handler.recall_command))
        self.app.add_handler(CommandHandler("forget", self.utils_handler.forget_command))
        
        # –ó–∞–º–µ—Ç–∫–∏
        self.app.add_handler(CommandHandler("note", self.utils_handler.note_command))
        self.app.add_handler(CommandHandler("notes", self.utils_handler.notes_command))
        self.app.add_handler(CommandHandler("delnote", self.utils_handler.delete_note_command))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.app.add_handler(CommandHandler("remind", self.utils_handler.remind_command))
        
        # –°–∏—Å—Ç–µ–º–∞
        self.app.add_handler(CommandHandler("system", self.utils_handler.system_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.app.add_handler(CommandHandler("weather", self.extras_handler.weather_command))
        self.app.add_handler(CommandHandler("rates", self.extras_handler.rates_command))
        self.app.add_handler(CommandHandler("crypto", self.extras_handler.crypto_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.app.add_handler(CommandHandler("fact", self.extras_handler.fact_command))
        self.app.add_handler(CommandHandler("joke", self.extras_handler.joke_command))
        self.app.add_handler(CommandHandler("quote", self.extras_handler.quote_command))
        self.app.add_handler(CommandHandler("activity", self.extras_handler.activity_command))
        self.app.add_handler(CommandHandler("tips", self.extras_handler.tips_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ò–≥—Ä—ã
        self.app.add_handler(CommandHandler("dice", self.extras_handler.dice_command))
        self.app.add_handler(CommandHandler("8ball", self.extras_handler.ball8_command))
        self.app.add_handler(CommandHandler("choose", self.extras_handler.choose_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.app.add_handler(CommandHandler("ocr", self.image_handler.ocr_command))
        self.app.add_handler(CommandHandler("describe", self.image_handler.describe_command))
        self.app.add_handler(CommandHandler("photo", self.image_handler.photo_help_command))
        
        # AI –ê–≥–µ–Ω—Ç
        self.app.add_handler(CommandHandler("agent_start", self.agent_handler.start_agent_command))
        self.app.add_handler(CommandHandler("agent_stop", self.agent_handler.stop_agent_command))
        self.app.add_handler(CommandHandler("agent_status", self.agent_handler.agent_status_command))
        self.app.add_handler(CommandHandler("agent_help", self.agent_handler.agent_help_command))
        self.app.add_handler(CommandHandler("smart_remind", self.agent_handler.smart_reminder))
        self.app.add_handler(CommandHandler("smart_note", self.agent_handler.smart_note))
        
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üìö‚ú®
        self.app.add_handler(CommandHandler("save", self.content_handler.handle_save_request))
        self.app.add_handler(CommandHandler("find", self.content_handler.find_command))
        self.app.add_handler(CommandHandler("library", self.content_handler.library_command))
        self.app.add_handler(CommandHandler("categories", self.content_handler.categories_command))
        
        # Callback handlers –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        from telegram.ext import CallbackQueryHandler
        self.app.add_handler(CallbackQueryHandler(
            self.content_handler.handle_title_callback,
            pattern="^content_"
        ))
        
        # Callback –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.app.add_handler(CallbackQueryHandler(
            self.content_handler.handle_autosave_callback,
            pattern="^autosave_"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (–í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—Ç–æ–º image_handler)
        # –°–Ω–∞—á–∞–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        self.app.add_handler(
            MessageHandler(
                filters.PHOTO & filters.User(user_id=config.ALLOWED_USER_IDS),
                self._handle_photo_router  # –†–æ—É—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        self.app.add_handler(
            MessageHandler(
                filters.Document.ALL & filters.User(user_id=config.ALLOWED_USER_IDS),
                self._handle_document_router
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –ø–æ—Ç–æ–º –ò–ò)
        self.app.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.User(user_id=config.ALLOWED_USER_IDS),
                self._handle_text_router
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await self.db.ensure_user(
            user.id,
            user.username,
            user.first_name,
            user.last_name
        )
        
        welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, **{user.first_name}**!

–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:

‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ–º –∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ üß† –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å —Ä–∞–±–æ—á–µ–≥–æ —Å–∞–π—Ç–∞
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
‚Ä¢ üñ• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∏—Å—Ç–µ–º—ã

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É ‚¨áÔ∏è –∏–ª–∏ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é!
"""
        
        await update.message.reply_text(
            welcome_message, 
            parse_mode='Markdown',
            reply_markup=get_main_menu()
        )
    
    async def _handle_photo_router(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –†–æ—É—Ç–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ - —Ä–µ—à–∞–µ—Ç –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–ª–∏ image_handler)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if context.user_data.get('waiting_for_content') or context.user_data.get('waiting_for_custom_title'):
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            saved = await self.content_handler.handle_image_for_library(update, context)
            if saved:
                return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π image_handler
        await self.image_handler.handle_photo(update, context)
        
        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        photo = update.message.photo[-1]
        caption = update.message.caption or ""
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        images_dir = config.DATA_DIR / "images"
        images_dir.mkdir(exist_ok=True)
        file_name = f"{update.effective_user.id}_{int(time.time())}.jpg"
        file_path = images_dir / file_name
        file_path.write_bytes(image_bytes)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ë–î (–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
        try:
            from services.content_library_service import ContentLibraryService
            content_service = ContentLibraryService(self.db, self.ai, self.vision)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            content_id, analysis = await content_service.analyze_and_save(
                user_id=update.effective_user.id,
                content_type="image",
                file_id=photo.file_id,
                file_path=str(file_path),
                image_bytes=bytes(image_bytes)
            )
            print(f"‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID={content_id}, title={analysis.get('suggested_title')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        suggested = await self.content_handler.auto_suggest_save(
            update, context,
            content_type="image",
            caption=caption,
            file_id=photo.file_id,
            file_path=str(file_path),
            image_bytes=bytes(image_bytes)
        )
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ - –≤—Å—ë, –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    async def _handle_document_router(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –†–æ—É—Ç–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —Ä–µ—à–∞–µ—Ç –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if context.user_data.get('waiting_for_content'):
            saved = await self.content_handler.handle_document_for_library(update, context)
            if saved:
                return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        # –ê–≤—Ç–æ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document = update.message.document
        suggested = await self.content_handler.auto_suggest_save(
            update, context,
            content_type="document",
            file_name=document.file_name,
            file_id=document.file_id
        )
        
        if not suggested:
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "üìÑ –ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç!\n\n"
                "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π /save –∏ –æ—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ."
            )
    
    async def _handle_text_router(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –†–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ - —Ä–µ—à–∞–µ—Ç –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–ª–∏ AI)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if context.user_data.get('waiting_for_custom_title'):
            saved = await self.content_handler.handle_custom_title(update, context)
            if saved:
                return  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        text = update.message.text
        url = self.content_handler.extract_url_from_text(text)
        
        if context.user_data.get('waiting_for_content'):
            if url:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
                saved = await self.content_handler.handle_link_for_library(update, context, url)
                if saved:
                    return
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç/–∫–æ–¥
                saved = await self.content_handler.handle_text_for_library(update, context)
                if saved:
                    return
        
        # –ê–≤—Ç–æ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫
        if url:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
            suggested = await self.content_handler.auto_suggest_save(
                update, context,
                content_type="link",
                text=text,
                url=url
            )
            if suggested:
                return  # –ü–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ AI
        
        elif len(text) > 200:
            # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã–º
            suggested = await self.content_handler.auto_suggest_save(
                update, context,
                content_type="text",
                text=text,
                text_content=text
            )
            # –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ AI
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π AI handler
        await self.ai_handler.handle_message(update, context)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå Exception: {context.error}", exc_info=context.error)
        
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã."
            )
    
    async def check_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (job)"""
        try:
            reminders = await self.db.get_pending_reminders()
            
            if reminders:
                logger.info(f"üîî –ù–∞–π–¥–µ–Ω–æ {len(reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            for reminder in reminders:
                try:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder['text']} ‚Üí {reminder['user_id']}")
                    
                    await context.bot.send_message(
                        chat_id=reminder['user_id'],
                        text=f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n\n{reminder['text']}",
                        parse_mode='Markdown'
                    )
                    
                    await self.db.complete_reminder(reminder['id'])
                    logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder['id']}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def check_agent(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç AI –∞–≥–µ–Ω—Ç–∞ (job)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in config.ALLOWED_USER_IDS:
                try:
                    message = await self.agent.check_and_act(user_id)
                    
                    if message:
                        logger.info(f"ü§ñ AI –ê–≥–µ–Ω—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode='Markdown'
                        )
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –∞–≥–µ–Ω—Ç–∞: {e}")
    
    async def check_personality(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∏–≤–æ–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (job)"""
        try:
            import random
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in config.ALLOWED_USER_IDS:
                try:
                    # –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å 20% –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                    if random.random() > 0.2:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    inactivity_msg = await self.personality.generate_inactivity_message(user_id)
                    if inactivity_msg:
                        logger.info(f"üí≠ AIVE (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å): –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=inactivity_msg
                        )
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        continue
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    spontaneous_msg = await self.personality.generate_spontaneous_message(user_id)
                    if spontaneous_msg:
                        logger.info(f"üí≠ AIVE (—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ): –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=spontaneous_msg
                        )
                        logger.info(f"‚úÖ –°–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ AIVE: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            async def init_db_async():
                await self.db.init_db()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            try:
                loop = asyncio.get_event_loop()
                if loop.is_closed():
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            loop.run_until_complete(init_db_async())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–æ–Ω —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop)
            self.app.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –§–∏–∫—Å –¥–ª—è Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º ProactorEventLoop
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    bot = TelegramBot()
    
    try:
        bot.initialize()
        bot.run()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


if __name__ == "__main__":
    main()

