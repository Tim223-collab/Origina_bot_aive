"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ç–∏–ª–∏—Ç: –ø–∞–º—è—Ç—å, –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–∏—Å—Ç–µ–º–∞
"""
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from datetime import datetime, timedelta
import psutil
import platform

from database import Database
from services import MemoryService


class UtilsHandler:
    def __init__(self, db: Database, memory: MemoryService):
        self.db = db
        self.memory = memory
    
    # === –ü–ê–ú–Ø–¢–¨ ===
    
    async def remember_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /remember <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>
        –ü—Ä–∏–º–µ—Ä: /remember personal –¥–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15.05.1990
        """
        user = update.effective_user
        
        if len(context.args) < 3:
            await update.message.reply_text(
                "üí≠ **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å:**\n"
                "`/remember <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/remember personal –¥–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15.05.1990`\n"
                "`/remember work –ø—Ä–æ–µ–∫—Ç_–¥–µ–¥–ª–∞–π–Ω 31.12.2025`",
                parse_mode='Markdown'
            )
            return
        
        category = context.args[0]
        key = context.args[1]
        value = " ".join(context.args[2:])
        
        success = await self.memory.remember_fact(user.id, category, key, value)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª!\n\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category}**\n"
                f"üîë –ö–ª—é—á: **{key}**\n"
                f"üìù –ó–Ω–∞—á–µ–Ω–∏–µ: **{value}**",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
    
    async def recall_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /recall [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        """
        user = update.effective_user
        
        category = context.args[0] if context.args else None
        
        memory_text = await self.memory.format_memory_for_display(user.id, category)
        
        await update.message.reply_text(memory_text, parse_mode='Markdown')
    
    async def forget_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /forget <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–ª—é—á> - —É–¥–∞–ª—è–µ—Ç —Ñ–∞–∫—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        """
        user = update.effective_user
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üóë **–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏:**\n"
                "`/forget <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–∫–ª—é—á>`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/forget personal –¥–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è`",
                parse_mode='Markdown'
            )
            return
        
        category = context.args[0]
        key = context.args[1]
        
        success = await self.memory.forget_fact(user.id, category, key)
        
        if success:
            await update.message.reply_text(
                f"üóë –£–¥–∞–ª–µ–Ω–æ: {category} / {key}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.")
    
    # === –ó–ê–ú–ï–¢–ö–ò ===
    
    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /note <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É
        """
        user = update.effective_user
        
        if not context.args:
            await update.message.reply_text(
                "üìù **–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:**\n"
                "`/note <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/note –ù–µ –∑–∞–±—ã—Ç—å –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ`"
            )
            return
        
        content = " ".join(context.args)
        
        note_id = await self.db.add_note(user.id, content)
        
        await update.message.reply_text(
            f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! (ID: {note_id})"
        )
    
    async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /notes [–ø–æ–∏—Å–∫] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏
        """
        user = update.effective_user
        
        search = " ".join(context.args) if context.args else None
        
        notes = await self.db.get_notes(user.id, search)
        
        if not notes:
            await update.message.reply_text("üì≠ –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
            return
        
        message = f"üìù **–ó–∞–º–µ—Ç–∫–∏** ({len(notes)}):\n\n"
        
        for note in notes[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            date = datetime.fromisoformat(note['created_at']).strftime('%d.%m.%Y %H:%M')
            message += f"**#{note['id']}** _{date}_\n"
            message += f"{note['content'][:100]}\n\n"
        
        if len(notes) > 10:
            message += f"_...–∏ –µ—â–µ {len(notes) - 10} –∑–∞–º–µ—Ç–æ–∫_"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def delete_note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /delnote <id> - —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
        """
        user = update.effective_user
        
        if not context.args:
            await update.message.reply_text(
                "üóë **–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:**\n"
                "`/delnote <ID>`"
            )
            return
        
        try:
            note_id = int(context.args[0])
            await self.db.delete_note(user.id, note_id)
            await update.message.reply_text(f"üóë –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏.")
    
    # === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
    
    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /remind <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        –ü—Ä–∏–º–µ—Ä: /remind 30 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É
        """
        user = update.effective_user
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚è∞ **–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n"
                "`/remind <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "`/remind 30 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É`\n"
                "`/remind 60 –°–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è —Å –ò–≤–∞–Ω–æ–º`\n"
                "`/remind 1 –¢–µ—Å—Ç` - —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                parse_mode='Markdown'
            )
            return
        
        try:
            minutes = int(context.args[0])
            text = " ".join(context.args[1:])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è (–∫–∞–∫ –≤ –ë–î)
            from datetime import timezone
            remind_at = datetime.now(timezone.utc) + timedelta(minutes=minutes)
            
            reminder_id = await self.db.add_reminder(user.id, text, remind_at)
            
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            import pytz
            ukraine_tz = pytz.timezone('Europe/Kiev')
            local_time = remind_at.astimezone(ukraine_tz)
            
            await update.message.reply_text(
                f"‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç!\n\n"
                f"üìù {text}\n"
                f"üïê {local_time.strftime('%H:%M')} (–ö–∏–µ–≤)\n"
                f"üÜî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id}",
                parse_mode='Markdown'
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id}: {text} –Ω–∞ {remind_at.isoformat()}")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
    
    # === –°–ò–°–¢–ï–ú–ê ===
    
    async def system_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /system - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        """
        await update.message.chat.send_action(ChatAction.TYPING)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.now() - boot_time
        
        message = f"""üñ• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**

üíª **–û–°:** {platform.system()} {platform.release()}
üîß **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {psutil.cpu_count()} —è–¥–µ—Ä
üìä **–ó–∞–≥—Ä—É–∑–∫–∞ CPU:** {cpu_percent}%

üíæ **–ü–∞–º—è—Ç—å:**
  ‚Ä¢ –í—Å–µ–≥–æ: {memory.total / (1024**3):.1f} GB
  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory.used / (1024**3):.1f} GB ({memory.percent}%)
  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {memory.available / (1024**3):.1f} GB

üíø **–î–∏—Å–∫:**
  ‚Ä¢ –í—Å–µ–≥–æ: {disk.total / (1024**3):.1f} GB
  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk.used / (1024**3):.1f} GB ({disk.percent}%)
  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {disk.free / (1024**3):.1f} GB

‚è± **–ê–ø—Ç–∞–π–º:** {uptime.days}–¥ {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º
"""
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        """
        help_text = """ü§ñ **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã AIVE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**ü§ñ AI –ê–≥–µ–Ω—Ç (–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π):**
/agent_start - –í–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
/agent_stop - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞  
/agent_status - –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
/agent_help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç—É
/smart_remind - –£–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/smart_note - –£–º–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞

**üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**
/ocr - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç
/describe - –û–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ
/photo - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ç–æ

**üß† –ò–ò –∏ –¥–∏–∞–ª–æ–≥–∏:**
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/summarize - –†–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/think - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑

**üí≠ –ü–∞–º—è—Ç—å:**
/remember - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç
/recall - –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç—å
/forget - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç

**üìù –ó–∞–º–µ—Ç–∫–∏:**
/note - –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
/delnote - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

**‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
/remind - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

**üìä –†–∞–±–æ—Ç–∞:**
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Å–∞–π—Ç–∞
/workers - –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞

**üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/weather - –ü–æ–≥–æ–¥–∞
/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
/crypto - –ö—Ä–∏–ø—Ç–æ —Ü–µ–Ω–∞

**üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/joke - –®—É—Ç–∫–∞
/quote - –ú–æ—Ç–∏–≤–∞—Ü–∏—è
/activity - –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è
/tips - –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç

**üé≤ –ò–≥—Ä—ã:**
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
/8ball - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
/choose - –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç

**üñ• –°–∏—Å—Ç–µ–º–∞:**
/system - –ò–Ω—Ñ–æ –æ —Å–∏—Å—Ç–µ–º–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° **–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ - —è –ø–æ–π–º—É!**

ü§ñ **AI –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω:**
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ –£—á—É—Å—å –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–º–æ—â—å
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á

‚ú® **–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ** - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

