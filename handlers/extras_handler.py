"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction

from services.extras_service import ExtrasService


class ExtrasHandler:
    def __init__(self, extras: ExtrasService):
        self.extras = extras
    
    # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
    
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /weather [–≥–æ—Ä–æ–¥] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É
        """
        city = " ".join(context.args) if context.args else "Moscow"
        
        await update.message.chat.send_action(ChatAction.TYPING)
        
        weather = await self.extras.get_weather(city)
        
        if weather:
            await update.message.reply_text(f"üå§ {weather}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")
    
    async def rates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /rates - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        """
        await update.message.chat.send_action(ChatAction.TYPING)
        
        rates = await self.extras.get_exchange_rates()
        
        if rates:
            message = f"""üí∞ **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§**

üíµ USD: {rates['USD']:.2f} ‚ÇΩ
üí∂ EUR: {rates['EUR']:.2f} ‚ÇΩ
üí¥ CNY: {rates['CNY']:.2f} ‚ÇΩ

üìÖ {rates['date'][:10]}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")
    
    async def crypto_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /crypto [—Å–∏–º–≤–æ–ª] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        """
        symbol = context.args[0].upper() if context.args else "BTC"
        
        await update.message.chat.send_action(ChatAction.TYPING)
        
        price = await self.extras.get_crypto_price(symbol)
        
        if price:
            await update.message.reply_text(
                f"‚Çø **{price['symbol']}**: ${price['price']} {price['currency']}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}"
            )
    
    # === –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø ===
    
    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /fact - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
        """
        fact = self.extras.get_random_fact()
        await update.message.reply_text(fact)
    
    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
        """
        joke = self.extras.get_joke()
        await update.message.reply_text(joke)
    
    async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /quote - –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        """
        quote = self.extras.get_motivational_quote()
        await update.message.reply_text(quote)
    
    async def activity_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /activity - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        """
        await update.message.chat.send_action(ChatAction.TYPING)
        
        activity = await self.extras.get_random_activity()
        
        if activity:
            await update.message.reply_text(activity)
        else:
            await update.message.reply_text("ü§î –ü–æ–ø—Ä–æ–±—É–π —Å—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è!")
    
    async def tips_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /tips [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: productivity, health, coding
        """
        category = context.args[0] if context.args else "productivity"
        
        if category not in ["productivity", "health", "coding"]:
            await update.message.reply_text(
                "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                "‚Ä¢ productivity\n"
                "‚Ä¢ health\n"
                "‚Ä¢ coding"
            )
            return
        
        tip = self.extras.get_tips(category)
        await update.message.reply_text(tip)
    
    # === –ò–ì–†–´ ===
    
    async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /dice [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]d[–≥—Ä–∞–Ω–µ–π] - –±—Ä–æ—Å–∞–µ—Ç –∫–æ—Å—Ç–∏
        –ü—Ä–∏–º–µ—Ä: /dice 2d6 –∏–ª–∏ /dice 3d20
        """
        sides = 6
        count = 1
        
        if context.args:
            try:
                arg = context.args[0].lower()
                if 'd' in arg:
                    parts = arg.split('d')
                    count = int(parts[0]) if parts[0] else 1
                    sides = int(parts[1]) if parts[1] else 6
                else:
                    count = int(arg)
            except:
                pass
        
        result = self.extras.roll_dice(sides, count)
        
        dice_emoji = "üé≤"
        rolls_text = " + ".join(str(r) for r in result['rolls'])
        
        message = f"{dice_emoji} **–ë—Ä–æ—Å–æ–∫ {result['count']}d{result['sides']}**\n\n"
        message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {rolls_text}\n"
        message += f"**–°—É–º–º–∞: {result['total']}**"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def ball8_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /8ball <–≤–æ–ø—Ä–æ—Å> - –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8
        """
        question = " ".join(context.args) if context.args else None
        
        if not question:
            await update.message.reply_text(
                "üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8**\n\n"
                "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –¥–∞/–Ω–µ—Ç:\n"
                "`/8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É—á–∏—Ç—å Python?`"
            )
            return
        
        answer = self.extras.magic_8ball(question)
        await update.message.reply_text(answer)
    
    async def choose_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /choose <–≤–∞—Ä–∏–∞–Ω—Ç1> –∏–ª–∏ <–≤–∞—Ä–∏–∞–Ω—Ç2> ... - –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        """
        if not context.args:
            await update.message.reply_text(
                "üéØ **–ü–æ–º–æ—â–Ω–∏–∫ –≤—ã–±–æ—Ä–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "`/choose –ø–∏—Ü—Ü–∞ –∏–ª–∏ —Å—É—à–∏ –∏–ª–∏ –±—É—Ä–≥–µ—Ä`"
            )
            return
        
        text = " ".join(context.args)
        choices = [c.strip() for c in text.split("–∏–ª–∏")]
        
        if len(choices) < 2:
            await update.message.reply_text(
                "‚ùì –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–æ–º '–∏–ª–∏'"
            )
            return
        
        import random
        choice = random.choice(choices)
        
        await update.message.reply_text(
            f"üéØ –ú–æ–π –≤—ã–±–æ—Ä: **{choice}**",
            parse_mode='Markdown'
        )

