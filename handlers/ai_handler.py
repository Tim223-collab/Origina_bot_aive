"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò –¥–∏–∞–ª–æ–≥–æ–≤
"""
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
import json

from database import Database
from services import AIService, MemoryService
from services.function_tools import AVAILABLE_FUNCTIONS, FunctionExecutor
import config


class AIHandler:
    def __init__(self, db: Database, ai: AIService, memory: MemoryService, 
                 extras_service=None, parser_service=None, agent_service=None, personality_service=None):
        self.db = db
        self.ai = ai
        self.memory = memory
        self.agent = agent_service  # AI –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.personality = personality_service  # –ñ–∏–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        # Function executor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        self.function_executor = FunctionExecutor(
            db=db,
            memory_service=memory,
            extras_service=extras_service,
            parser_service=parser_service
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å Function Calling
        """
        user = update.effective_user
        message_text = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∂–∏–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        if self.personality:
            self.personality.update_user_activity(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        from handlers.menu_handler import MenuHandler
        menu_handler = MenuHandler()
        if await menu_handler.handle_menu_button(update, context):
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await update.message.chat.send_action(ChatAction.TYPING)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db.add_message(user.id, "user", message_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        recent_messages = await self.db.get_recent_messages(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        memory_context = await self.memory.get_context_for_ai(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–∞–º—è—Ç—å—é –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –ø–æ –ö–∏–µ–≤—É
        from datetime import datetime, timedelta
        import pytz
        
        kiev_tz = pytz.timezone('Europe/Kiev')
        current_time = datetime.now(kiev_tz)
        current_date = current_time.strftime("%Y-%m-%d")
        current_datetime = current_time.strftime("%Y-%m-%d %H:%M")
        current_day = current_time.day
        current_month = current_time.month
        current_year = current_time.year
        yesterday = (current_time - timedelta(days=1)).strftime("%Y-%m-%d")
        day_before = (current_time - timedelta(days=2)).strftime("%Y-%m-%d")
        
        system_prompt = config.SYSTEM_PROMPT + f"""

üìÖ –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê –ò –í–†–ï–ú–Ø (–ö–∏–µ–≤/–£–∫—Ä–∞–∏–Ω–∞):
–°–µ–π—á–∞—Å: {current_datetime} (–¥–µ–Ω—å {current_day}, –º–µ—Å—è—Ü {current_month}, –≥–æ–¥ {current_year})
–°–µ–≥–æ–¥–Ω—è: {current_date}
–í—á–µ—Ä–∞: {yesterday}
–ü–æ–∑–∞–≤—á–µ—Ä–∞: {day_before}

üìä –ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´ –° –î–ê–¢–ê–ú–ò:
1. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–∑–∞ 23" –∏–ª–∏ "23 —á–∏—Å–ª–∞" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç {current_year}-{current_month:02d}-23
2. –ö–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç "–∑–∞ –≤—á–µ—Ä–∞" - –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—É {yesterday}
3. –ö–æ–≥–¥–∞ "–ø–æ–∑–∞–≤—á–µ—Ä–∞" - –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—É {day_before}
4. –ö–æ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä "27") - —ç—Ç–æ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ {current_month}
5. –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–π –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
6. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å" - –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä date –≤–æ–æ–±—â–µ

–ü–†–ò–ú–ï–†–´:
- "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 23" ‚Üí date = "{current_year}-{current_month:02d}-23"
- "–ø–æ–∫–∞–∂–∏ –∑–∞ –≤—á–µ—Ä–∞" ‚Üí date = "{yesterday}"
- "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è" ‚Üí date –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
- "–∑–∞ 27 —á–∏—Å–ª–æ" ‚Üí date = "{current_year}-{current_month:02d}-27"

üì∏ –í–ê–ñ–ù–û! –†–ê–ë–û–¢–ê –° –§–û–¢–û:
–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ü–û–ö–ê–ó–ê–¢–¨/–û–¢–ü–†–ê–í–ò–¢–¨ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, –∫–∞—Ä—Ç—É –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é show_saved_content()! –ù–ï –æ–ø–∏—Å—ã–≤–∞–π —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º! –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏! –û—Ç–ø—Ä–∞–≤–ª—è–π –†–ï–ê–õ–¨–ù–û–ï —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é.
"""
        
        if memory_context:
            system_prompt += memory_context
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        for msg in recent_messages:
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not recent_messages or recent_messages[-1]["content"] != message_text:
            messages.append({"role": "user", "content": message_text})
        
        # === –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã –±–µ–∑ –ò–ò: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ ===
        import re
        text_lower = message_text.lower()
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ç–µ–Ω—Ç: '{message_text}' -> '{text_lower}'")
        
        if re.search(r"(–ø–æ–∫–∞–∂–∏|–æ—Ç–ø—Ä–∞–≤—å|—Å–∫–∏–Ω—å).*(–ø–æ—Å–ª–µ–¥–Ω|—Å–≤–µ–∂|–∫—Ä–∞–π–Ω).*—Ñ–æ—Ç–æ|–ø–æ—Å–ª–µ–¥–Ω.*—Ñ–æ—Ç–æ", text_lower):
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ–Ω—Ç '–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ' - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–µ–∑ –ò–ò")
            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            items = await self.db.get_content(user.id, content_type='image', limit=1)
            print(f"üìö –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: {len(items)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            if items:
                item = items[0]
                print(f"üì∏ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: file_path={item.get('file_path')}, file_id={item.get('file_id')}")
                title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                category = item.get('category', 'other')
                caption = f"üì∏ <b>{title}</b>\nüè∑ {category.title()}"
                try:
                    from pathlib import Path
                    if item.get('file_path') and Path(item['file_path']).exists():
                        print(f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑ —Ñ–∞–π–ª–∞: {item['file_path']}")
                        with open(item['file_path'], 'rb') as photo:
                            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='HTML')
                            print("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                            return
                    elif item.get('file_id'):
                        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ file_id: {item['file_id']}")
                        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=item['file_id'], caption=caption, parse_mode='HTML')
                        print("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ file_id!")
                        return
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    pass
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏ –Ω–æ–≤–æ–µ.")
                return
            else:
                print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î")
        else:
            print("‚ùå –ò–Ω—Ç–µ–Ω—Ç '–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–¥–∞—é –≤ –ò–ò")

        # === –í–´–ó–û–í –ò–ò –° FUNCTION CALLING ===
        response = await self.ai.chat(
            messages=messages,
            functions=AVAILABLE_FUNCTIONS,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            temperature=0.7,
            max_tokens=800  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: 2000‚Üí800 (-60% —Ç–æ–∫–µ–Ω–æ–≤!)
        )
        
        if not response:
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # === –ü–†–û–í–ï–†–ö–ê –ù–ê FUNCTION CALL ===
        # DeepSeek –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        try:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: tool_calls (DeepSeek API v1)
            if isinstance(response, dict) and "tool_calls" in response and response["tool_calls"]:
                tool_call = response["tool_calls"][0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
                function_name = tool_call["function"]["name"]
                arguments = json.loads(tool_call["function"]["arguments"])
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                print(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")
                function_result = await self.function_executor.execute_function(
                    function_name=function_name,
                    arguments=arguments,
                    user_id=user.id
                )
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {function_result[:200] if function_result else 'None'}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                if function_result and function_result.startswith("SEND_PHOTOS:"):
                    print(f"üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ: {function_result}")
                    # –§–æ—Ä–º–∞—Ç: SEND_PHOTOS:worker_name|count
                    parts = function_result.replace("SEND_PHOTOS:", "").split("|")
                    worker_name = parts[0]
                    
                    from pathlib import Path
                    screenshots_dir = Path("data/screenshots")
                    screenshots = list(screenshots_dir.glob(f"*{worker_name}*.png"))
                    
                    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)} –≤ {screenshots_dir}")
                    
                    if screenshots:
                        await update.message.reply_text(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è {worker_name}...")
                        for screenshot_path in screenshots:
                            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: {screenshot_path}")
                            try:
                                with open(screenshot_path, 'rb') as photo:
                                    await update.message.reply_photo(
                                        photo=photo,
                                        caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path.name}"
                                    )
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        function_result = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}"
                    else:
                        print(f"‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {screenshots_dir}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                elif function_result and function_result.startswith("SEND_CONTENT:"):
                    print(f"üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {function_result}")
                    # –§–æ—Ä–º–∞—Ç: SEND_CONTENT:id1,id2,id3
                    content_ids = function_result.replace("SEND_CONTENT:", "").split(",")
                    
                    sent_count = 0
                    for content_id in content_ids:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –ë–î
                            content = await self.db.get_content(update.effective_user.id, content_id=int(content_id.strip()))
                            
                            if not content:
                                continue
                            
                            item = content[0]  # get_content –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
                            content_type = item.get('content_type', 'unknown')
                            title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            category = item.get('category', 'other')
                            
                            caption = f"üì∏ <b>{title}</b>\nüè∑ {category.title()}"
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                            if content_type == "image":
                                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: file_path > file_id
                                if item.get('file_path'):
                                    from pathlib import Path
                                    file_path = Path(item['file_path'])
                                    if file_path.exists():
                                        with open(file_path, 'rb') as photo:
                                            await update.message.reply_photo(
                                                photo=photo,
                                                caption=caption,
                                                parse_mode='HTML'
                                            )
                                        sent_count += 1
                                elif item.get('file_id'):
                                    try:
                                        await context.bot.send_photo(
                                            chat_id=update.effective_chat.id,
                                            photo=item['file_id'],
                                            caption=caption,
                                            parse_mode='HTML'
                                        )
                                        sent_count += 1
                                    except:
                                        pass  # file_id –∏—Å—Ç—ë–∫
                        
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {content_id}: {e}")
                    
                    if sent_count > 0:
                        function_result = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {sent_count}"
                    else:
                        function_result = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML —Ç–µ–≥–∏
                if '<b>' in function_result or '<i>' in function_result or '<code>' in function_result:
                    parse_mode = 'HTML'
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Markdown
                elif '**' in function_result or '__' in function_result or '`' in function_result:
                    parse_mode = 'Markdown'
                else:
                    parse_mode = None
                
                await update.message.reply_text(function_result, parse_mode=parse_mode)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                await self.db.add_message(user.id, "assistant", function_result)
                
                # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å tool_calls
                messages.append({
                    "role": "assistant",
                    "content": None,
                    "tool_calls": response["tool_calls"]
                })
                
                # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
                messages.append({
                    "role": "tool",
                    "tool_call_id": tool_call["id"],
                    "content": function_result
                })
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ù–ï –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                if function_name == 'get_work_stats':
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è AI
                    messages.append({
                        "role": "system",
                        "content": """–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –æ—Ç—á–µ—Ç –≤—ã—à–µ. 
                        
–î–∞–π –û–ß–ï–ù–¨ –ö–†–ê–¢–ö–û–ï —Ä–µ–∑—é–º–µ (–º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
- –ö—Ç–æ –ª–∏–¥–µ—Ä –∏ –∫—Ç–æ –æ—Ç—Å—Ç–∞–µ—Ç
- –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ù–ï –ü–ï–†–ï–ß–ò–°–õ–Ø–ô –≤—Å–µ—Ö! –ù–ï –î–£–ë–õ–ò–†–£–ô —Ü–∏—Ñ—Ä—ã! –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.
–ü–∏—à–∏ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –±–µ–∑ "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–ø—Ä–µ–¥–ª–∞–≥–∞—é" –∏ —Ç.–¥."""
                    })
                    
                    final_response = await self.ai.chat(
                        messages=messages,
                        temperature=0.7,
                        max_tokens=120  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: 150‚Üí120 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    )
                    
                    if final_response and isinstance(final_response, str) and len(final_response) > 10:
                        await update.message.reply_text(final_response)
                        await self.db.add_message(user.id, "assistant", final_response)
            
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: function_call (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            elif isinstance(response, dict) and "function_call" in response:
                function_name = response["function_call"]["name"]
                arguments = json.loads(response["function_call"]["arguments"])
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                function_result = await self.function_executor.execute_function(
                    function_name=function_name,
                    arguments=arguments,
                    user_id=user.id
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await update.message.reply_text(function_result)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                messages.append({
                    "role": "function",
                    "name": function_name,
                    "content": function_result
                })
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (—Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏)
                final_response = await self.ai.chat(
                    messages=messages,
                    temperature=0.7,
                    max_tokens=200  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: 1000‚Üí200 (-80% —Ç–æ–∫–µ–Ω–æ–≤!)
                )
                
                if final_response:
                    await self.db.add_message(user.id, "assistant", final_response)
                    # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if final_response != function_result and len(final_response) > 10:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                        if '<b>' in final_response or '<i>' in final_response or '<code>' in final_response:
                            parse_mode = 'HTML'
                        elif '**' in final_response or '__' in final_response or '`' in final_response:
                            parse_mode = 'Markdown'
                        else:
                            parse_mode = None
                        await update.message.reply_text(final_response, parse_mode=parse_mode)
                
            else:
                # Fallback: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                import re as _re
                text_lower = message_text.lower()
                print(f"üîÑ Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞: '{message_text}' -> '{text_lower}'")
                
                if _re.search(r"(–ø–æ–∫–∞–∂–∏|–æ—Ç–ø—Ä–∞–≤—å|—Å–∫–∏–Ω—å).*(–ø–æ—Å–ª–µ–¥–Ω|—Å–≤–µ–∂|–∫—Ä–∞–π–Ω).*—Ñ–æ—Ç–æ|–ø–æ—Å–ª–µ–¥–Ω.*—Ñ–æ—Ç–æ", text_lower):
                    print("‚úÖ Fallback: –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ–Ω—Ç '–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ'")
                    items = await self.db.get_content(user.id, content_type='image', limit=1)
                    print(f"üìö Fallback: –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: {len(items)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    
                    if items:
                        item = items[0]
                        print(f"üì∏ Fallback: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: file_path={item.get('file_path')}, file_id={item.get('file_id')}")
                        title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        category = item.get('category', 'other')
                        caption = f"üì∏ <b>{title}</b>\nüè∑ {category.title()}"
                        try:
                            from pathlib import Path
                            if item.get('file_path') and Path(item['file_path']).exists():
                                print(f"üìÅ Fallback: –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑ —Ñ–∞–π–ª–∞: {item['file_path']}")
                                with open(item['file_path'], 'rb') as photo:
                                    await update.message.reply_photo(photo=photo, caption=caption, parse_mode='HTML')
                                    print("‚úÖ Fallback: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                                    return
                            elif item.get('file_id'):
                                print(f"üì± Fallback: –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ file_id: {item['file_id']}")
                                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=item['file_id'], caption=caption, parse_mode='HTML')
                                print("‚úÖ Fallback: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ file_id!")
                                return
                        except Exception as e:
                            print(f"‚ùå Fallback: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                            pass
                    else:
                        print("‚ùå Fallback: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î")
                else:
                    print("‚ùå Fallback: –ò–Ω—Ç–µ–Ω—Ç '–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                if '<b>' in response or '<i>' in response or '<code>' in response:
                    parse_mode = 'HTML'
                elif '**' in response or '__' in response or '`' in response:
                    parse_mode = 'Markdown'
                else:
                    parse_mode = None
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if parse_mode == 'HTML':
                    try:
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏, —É–±–∏—Ä–∞–µ–º HTML
                        if response.count('<b>') != response.count('</b>') or \
                           response.count('<i>') != response.count('</i>') or \
                           response.count('<code>') != response.count('</code>'):
                            print("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ —Ç–µ–∫—Å—Ç")
                            parse_mode = None
                    except:
                        parse_mode = None
                
                await self.db.add_message(user.id, "assistant", response)
                await update.message.reply_text(response, parse_mode=parse_mode)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
            if isinstance(response, str):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–∂–µ –≤ fallback
                if '<b>' in response or '<i>' in response or '<code>' in response:
                    parse_mode = 'HTML'
                elif '**' in response or '__' in response or '`' in response:
                    parse_mode = 'Markdown'
                else:
                    parse_mode = None
                
                await self.db.add_message(user.id, "assistant", response)
                await update.message.reply_text(response, parse_mode=parse_mode)
            else:
                await update.message.reply_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."
                )
        
        # === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ê–ì–ï–ù–¢–ê (–û–¢–ö–õ–Æ–ß–ï–ù–ê) ===
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—á–∏—Ç–∞–ª —ç—Ç–æ –Ω–∞–∑–æ–π–ª–∏–≤—ã–º
        pass
        # if self.agent and self.agent.is_enabled(user.id):
        #     try:
        #         # 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        #         tasks_result = await self.agent.extract_tasks_from_dialogue(user.id, message_text)
        #         
        #         if tasks_result and tasks_result.get("suggestion"):
        #             await update.message.reply_text(
        #                 f"üí° {tasks_result['suggestion']}",
        #                 parse_mode='Markdown'
        #             )
        #         
        #         # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        #         completion_msg = await self.agent.intelligent_task_completion(user.id, message_text)
        #         if completion_msg:
        #             await update.message.reply_text(completion_msg)
        #         
        #         # 3. –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∏–∑—Ä–µ–¥–∫–∞)
        #         import random
        #         if random.random() < 0.1:  # 10% —à–∞–Ω—Å
        #             prediction = await self.agent.predictive_suggestions(user.id)
        #             if prediction:
        #                 await update.message.reply_text(prediction)
        #         
        #     except Exception as e:
        #         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def clear_context_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /clear - –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        """
        user = update.effective_user
        
        await self.db.clear_conversation(user.id)
        await update.message.reply_text(
            "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"
        )
    
    async def summarize_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /summarize - —Ä–µ–∑—é–º–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.db.get_recent_messages(user.id, limit=10)
        
        if not messages:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è
        conversation_text = "\n".join([
            f"{msg['role']}: {msg['content']}" for msg in messages
        ])
        
        await update.message.chat.send_action(ChatAction.TYPING)
        
        summary = await self.ai.summarize_text(conversation_text)
        
        if summary:
            await update.message.reply_text(f"üìù **–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:**\n\n{summary}")
        else:
            await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ.")
    
    async def think_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /think <–≤–æ–ø—Ä–æ—Å> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reasoning mode (deepseek-reasoner)
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        user = update.effective_user
        
        if not context.args:
            await update.message.reply_text(
                "ü§î **–†–µ–∂–∏–º –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–¥–µ—Ç –∫ –≤—ã–≤–æ–¥—É.\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "`/think <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/think –ö–∞–∫ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏?`\n"
                "‚Ä¢ `/think –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã Python vs Go`\n"
                "‚Ä¢ `/think –ö–∞–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂?`",
                parse_mode='Markdown'
            )
            return
        
        question = " ".join(context.args)
        
        await update.message.reply_text("ü§î –î—É–º–∞—é... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~10-20 —Å–µ–∫—É–Ω–¥)")
        await update.message.chat.send_action(ChatAction.TYPING)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = await self.db.get_recent_messages(user.id, limit=3)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        memory_context = await self.memory.get_context_for_ai(user.id)
        system_prompt = None
        if memory_context:
            system_prompt = f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–ª—É–±–æ–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã.{memory_context}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º reasoning mode
        response = await self.ai.reasoning_chat(
            user_message=question,
            context_messages=recent_messages,
            system_prompt=system_prompt
        )
        
        if response:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self.db.add_message(user.id, "user", f"[THINK] {question}")
            await self.db.add_message(user.id, "assistant", response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º)
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(response) > 4000:
                parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(response)
        else:
            await update.message.reply_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )

