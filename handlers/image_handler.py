"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
import random
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction

from services.vision_service import VisionService
from services.ai_service import AIService


class ImageHandler:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini Vision + DeepSeek —É–ª—É—á—à–µ–Ω–∏–µ"""
    
    # –ñ–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç AIVE –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    GREETING_MESSAGES = [
        "üëã AIVE –Ω–∞ —Å–≤—è–∑–∏! –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é...",
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –£–∂–µ —Å–º–æ—Ç—Ä—é —á—Ç–æ —Ç—É—Ç...",
        "üëÄ –û, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –°–º–æ—Ç—Ä—é...",
        "üí´ AIVE –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ò–∑—É—á–∞—é —Ñ–æ—Ç–æ...",
        "‚ú® –î–∞–π –≤–∑–≥–ª—è–Ω—É –Ω–∞ —ç—Ç–æ..."
    ]
    
    THINKING_MESSAGES = {
        "describe": [
            "ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...",
            "üí≠ –§–æ—Ä–º—É–ª–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...",
            "‚úçÔ∏è –ì–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...",
            "üé® –û—Ñ–æ—Ä–º–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
        ],
        "ocr": [
            "‚úçÔ∏è –°–µ–π—á–∞—Å –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—é...",
            "üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...",
            "‚ú® –î–µ–ª–∞—é —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º...",
            "üéØ –§–æ—Ä–º–∞—Ç–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
        ],
        "code": [
            "üí° –ì–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            "üîç –ò—â—É —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∫–æ–¥...",
            "üìä –û—Ü–µ–Ω–∏–≤–∞—é –∫–∞—á–µ—Å—Ç–≤–æ...",
            "‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
        ],
        "chart": [
            "üîç –ò—â—É —Ç—Ä–µ–Ω–¥—ã –∏ –¥–µ–ª–∞—é –≤—ã–≤–æ–¥—ã...",
            "üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
            "üí° –ì–æ—Ç–æ–≤–ª—é –∏–Ω—Å–∞–π—Ç—ã...",
            "üìä –§–æ—Ä–º—É–ª–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."
        ]
    }
    
    def __init__(self, vision_service: VisionService, ai_service: AIService):
        self.vision = vision_service
        self.ai = ai_service
    
    async def _enhance_with_deepseek(self, gemini_result: str, analysis_type: str, user_question: str = None) -> str:
        """
        –£–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Gemini —á–µ—Ä–µ–∑ DeepSeek
        
        Args:
            gemini_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Gemini
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (describe/ocr/code/chart)
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        prompts = {
            "describe": """–¢—ã –ø–æ–ª—É—á–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–π AI –º–æ–¥–µ–ª–∏. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
1. –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º
2. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ —á–µ—Ç–∫–æ
4. –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è

–ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç AI:
{result}

{question_part}

–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:""",

            "ocr": """–¢—ã –ø–æ–ª—É—á–∏–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OCR –º–æ–¥–µ–ª–∏.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
3. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
4. –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º

–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
{result}

–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:""",

            "code": """–¢—ã –ø–æ–ª—É—á–∏–ª –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–æ–π AI. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –æ—à–∏–±–∫–∏, —É–ª—É—á—à–µ–Ω–∏—è)
2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
4. –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (1-10)
5. –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏

–ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
{result}

–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:""",

            "chart": """–¢—ã –ø–æ–ª—É—á–∏–ª –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞/–¥–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç –¥—Ä—É–≥–æ–π AI.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º:
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ç–∫–æ
2. –î–æ–±–∞–≤–∏—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤
3. –î–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
4. –í—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
5. –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏

–ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
{result}

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:"""
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt_template = prompts.get(analysis_type, prompts["describe"])
        question_part = f"\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}" if user_question else ""
        prompt = prompt_template.format(result=gemini_result, question_part=question_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        messages = [
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã –ø–æ–Ω—è—Ç–Ω—ã–º–∏, –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º–∏."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
        
        enhanced_result = await self.ai.chat(messages, temperature=0.7, max_tokens=2000)
        
        return enhanced_result if enhanced_result else gemini_result
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        caption = update.message.caption or ""
        
        await update.message.reply_text(random.choice(self.GREETING_MESSAGES))
        await update.message.chat.send_action(ChatAction.TYPING)
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file = await context.bot.get_file(photo.file_id)
            image_bytes = await file.download_as_bytearray()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∏
            caption_lower = caption.lower()
            
            if any(word in caption_lower for word in ['—Ç–µ–∫—Å—Ç', 'ocr', '—Ä–∞—Å–ø–æ–∑–Ω–∞–π', '–ø—Ä–æ—á–∏—Ç–∞–π', 'text']):
                # OCR - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                await update.message.reply_text("üëÄ –í–≥–ª—è–¥—ã–≤–∞—é—Å—å –≤ —Ç–µ–∫—Å—Ç...")
                gemini_result = await self.vision.ocr_image(bytes(image_bytes))
                
                await update.message.reply_text(random.choice(self.THINKING_MESSAGES["ocr"]))
                result = await self._enhance_with_deepseek(gemini_result, "ocr")
                response = f"üìÑ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{result}"
            
            elif any(word in caption_lower for word in ['–∫–æ–¥', 'code', '–æ—à–∏–±–∫–∞', 'bug', '–±–∞–≥']):
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
                await update.message.reply_text("üë®‚Äçüíª –ß–∏—Ç–∞—é –∫–æ–¥...")
                gemini_result = await self.vision.analyze_code(bytes(image_bytes))
                
                await update.message.reply_text(random.choice(self.THINKING_MESSAGES["code"]))
                result = await self._enhance_with_deepseek(gemini_result, "code")
                response = f"üíª **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**\n\n{result}"
            
            elif any(word in caption_lower for word in ['–≥—Ä–∞—Ñ–∏–∫', '–¥–∏–∞–≥—Ä–∞–º–º', 'chart', 'graph', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫']):
                # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
                await update.message.reply_text("üìä –ò–∑—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫...")
                gemini_result = await self.vision.analyze_chart(bytes(image_bytes))
                
                await update.message.reply_text(random.choice(self.THINKING_MESSAGES["chart"]))
                result = await self._enhance_with_deepseek(gemini_result, "chart")
                response = f"üìä **–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞:**\n\n{result}"
            
            else:
                # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                await update.message.reply_text("üëÅÔ∏è –°–º–æ—Ç—Ä—é –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                gemini_result = await self.vision.analyze_image(
                    bytes(image_bytes),
                    question=caption if caption else None
                )
                
                await update.message.reply_text(random.choice(self.THINKING_MESSAGES["describe"]))
                result = await self._enhance_with_deepseek(
                    gemini_result, 
                    "describe",
                    user_question=caption if caption else None
                )
                response = f"üì∏ **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n{result}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π
            if len(response) > 4000:
                parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode='Markdown')
            else:
                await update.message.reply_text(response, parse_mode='Markdown')
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {user.first_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ."
            )
    
    async def ocr_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /ocr - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
        """
        await update.message.reply_text(
            "üìÑ **OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å:\n"
            "‚Ä¢ `—Ç–µ–∫—Å—Ç` –∏–ª–∏ `ocr`\n"
            "‚Ä¢ `–ø—Ä–æ—á–∏—Ç–∞–π` –∏–ª–∏ `—Ä–∞—Å–ø–æ–∑–Ω–∞–π`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ –§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ + –ø–æ–¥–ø–∏—Å—å '—Ç–µ–∫—Å—Ç'\n"
            "‚Ä¢ –§–æ—Ç–æ —á–µ–∫–∞ + –ø–æ–¥–ø–∏—Å—å '–ø—Ä–æ—á–∏—Ç–∞–π'\n"
            "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ + –ø–æ–¥–ø–∏—Å—å 'ocr'\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ä—É—Å—Å–∫–∏–π, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏!",
            parse_mode='Markdown'
        )
    
    async def describe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /describe - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        await update.message.reply_text(
            "üì∏ **–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - —è –æ–ø–∏—à—É —á—Ç–æ –Ω–∞ –Ω–µ–º!\n\n"
            "**–ò–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å —Å –≤–æ–ø—Ä–æ—Å–æ–º:**\n"
            "‚Ä¢ '–ß—Ç–æ —ç—Ç–æ?' - –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ '–ö–∞–∫–æ–π —Ü–≤–µ—Ç?' - –ø—Ä–æ —Ü–≤–µ—Ç–∞\n"
            "‚Ä¢ '–ì–¥–µ —ç—Ç–æ?' - –ø—Ä–æ –º–µ—Å—Ç–æ\n"
            "‚Ä¢ –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å\n\n"
            "**–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã:**\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—å '–∫–æ–¥' - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—å '—Ç–µ–∫—Å—Ç' - OCR\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—å '–≥—Ä–∞—Ñ–∏–∫' - –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ –§–æ—Ç–æ –µ–¥—ã - –æ–ø–∏—à—É –±–ª—é–¥–æ\n"
            "‚Ä¢ –§–æ—Ç–æ –ø—Ä–∏—Ä–æ–¥—ã - —Ä–∞—Å—Å–∫–∞–∂—É –æ –º–µ—Å—Ç–µ\n"
            "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–¥–∞ + '–∫–æ–¥' - –Ω–∞–π–¥—É –æ—à–∏–±–∫–∏\n"
            "‚Ä¢ –§–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ + '–≥—Ä–∞—Ñ–∏–∫' - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥",
            parse_mode='Markdown'
        )
    
    async def photo_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /photo - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        await update.message.reply_text(
            "üì∏ **–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏**\n\n"
            "**üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n\n"
            "1Ô∏è‚É£ **–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n"
            "   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n"
            "   ‚Ä¢ –ò–ª–∏ –¥–æ–±–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–ø–∏—Å–∏\n\n"
            "2Ô∏è‚É£ **OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)**\n"
            "   ‚Ä¢ –§–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å '—Ç–µ–∫—Å—Ç'\n"
            "   ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —á–µ–∫–∞–º–∏, –Ω–∞–¥–ø–∏—Å—è–º–∏\n\n"
            "3Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞**\n"
            "   ‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–¥–∞ + –ø–æ–¥–ø–∏—Å—å '–∫–æ–¥'\n"
            "   ‚Ä¢ –ù–∞–π–¥—É –æ—à–∏–±–∫–∏ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "4Ô∏è‚É£ **–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤**\n"
            "   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ + –ø–æ–¥–ø–∏—Å—å '–≥—Ä–∞—Ñ–∏–∫'\n"
            "   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –∏ –¥–∞–º –≤—ã–≤–æ–¥—ã\n\n"
            "**‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /describe - –∫–∞–∫ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Ä¢ /ocr - –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ /photo - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**üí° –°–æ–≤–µ—Ç:**\n"
            "–ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!\n\n"
            "**üìä –õ–∏–º–∏—Ç—ã:**\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 1500 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–¥–µ–Ω—å",
            parse_mode='Markdown'
        )

