"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ChatAction
from typing import Optional, Dict
import re

from database import Database
from services.content_library_service import ContentLibraryService


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_TITLE = 1


class ContentHandler:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    """
    
    def __init__(self, db: Database, content_service: ContentLibraryService):
        self.db = db
        self.content = content_service
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        self.pending_content = {}  # {user_id: {content_data, analysis}}
    
    async def handle_save_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /save –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        """
        user = update.effective_user
        
        await update.message.reply_text(
            "üíæ <b>–†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
            "‚Ä¢ üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞—Ä—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç, —Ñ–æ—Ç–æ)\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥\n"
            "‚Ä¢ üîó –°—Å—ã–ª–∫—É (YouTube, —Å—Ç–∞—Ç—å—è, –∏ —Ç.–¥.)\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ\n"
            "‚Ä¢ üé¨ –í–∏–¥–µ–æ\n\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é —á—Ç–æ —ç—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        context.user_data['waiting_for_content'] = True
    
    async def handle_image_for_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        """
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if not context.user_data.get('waiting_for_content'):
            return False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç image_handler
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data.pop('waiting_for_content', None)
        
        await update.message.chat.send_action(ChatAction.TYPING)
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AI
        content_id, analysis = await self.content.analyze_and_save(
            user_id=user.id,
            content_type="image",
            file_id=photo.file_id,
            image_bytes=bytes(image_bytes)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        self.pending_content[user.id] = {
            'content_id': content_id,
            'analysis': analysis
        }
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await self._ask_for_title(update, analysis)
        
        return True  # –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    async def handle_text_for_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, False –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        """
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if not context.user_data.get('waiting_for_content'):
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥
            if len(text) < 100:
                return False  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥
        context.user_data.pop('waiting_for_content', None)
        
        await update.message.chat.send_action(ChatAction.TYPING)
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥
        content_type = "text"  # AI —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤ analyze_and_save
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        content_id, analysis = await self.content.analyze_and_save(
            user_id=user.id,
            content_type=content_type,
            text_content=text
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –µ—Å–ª–∏ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª —á—Ç–æ —ç—Ç–æ –∫–æ–¥
        if analysis.get('content_type') == 'code':
            await self.db.update_content(content_id, user.id, metadata={'content_type': 'code'})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending
        self.pending_content[user.id] = {
            'content_id': content_id,
            'analysis': analysis
        }
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await self._ask_for_title(update, analysis)
        
        return True
    
    async def handle_document_for_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        user = update.effective_user
        
        if not context.user_data.get('waiting_for_content'):
            return False
        
        context.user_data.pop('waiting_for_content', None)
        
        document = update.message.document
        file_name = document.file_name
        
        await update.message.reply_text("üìÑ –°–æ—Ö—Ä–∞–Ω—è—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        content_id, analysis = await self.content.analyze_and_save(
            user_id=user.id,
            content_type="document",
            file_id=document.file_id,
            file_name=file_name,
            metadata={'mime_type': document.mime_type, 'file_size': document.file_size}
        )
        
        analysis['suggested_title'] = file_name or "–î–æ–∫—É–º–µ–Ω—Ç"
        
        self.pending_content[user.id] = {
            'content_id': content_id,
            'analysis': analysis
        }
        
        await self._ask_for_title(update, analysis)
        
        return True
    
    async def handle_link_for_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE, url: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        
        Args:
            url: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        user = update.effective_user
        
        if not context.user_data.get('waiting_for_content'):
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ
            return False
        
        context.user_data.pop('waiting_for_content', None)
        
        await update.message.reply_text("üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        content_id, analysis = await self.content.analyze_and_save(
            user_id=user.id,
            content_type="link",
            url=url
        )
        
        self.pending_content[user.id] = {
            'content_id': content_id,
            'analysis': analysis
        }
        
        await self._ask_for_title(update, analysis)
        
        return True
    
    async def _ask_for_title(self, update: Update, analysis: Dict):
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç AI
        """
        suggested_title = analysis.get('suggested_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = analysis.get('category', 'other')
        description = analysis.get('description', '')
        
        # –≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_emoji = self.content.CATEGORIES.get(category, "üìÇ").split()[0]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"content_accept_{suggested_title}")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="content_edit_title")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="content_change_category")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="content_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"‚ú® <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"{category_emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.title()}\n"
            f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{suggested_title}</code>\n\n"
            f"–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º?"
        )
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_title_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
        query = update.callback_query
        user = update.effective_user
        data = query.data
        
        await query.answer()
        
        if data.startswith("content_accept_"):
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            title = data.replace("content_accept_", "")
            
            if user.id in self.pending_content:
                content_id = self.pending_content[user.id]['content_id']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await self.db.update_content(
                    content_id=content_id,
                    user_id=user.id,
                    title=title
                )
                
                await query.edit_message_text(
                    f"‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{title}</code>\n"
                    f"üÜî ID: #{content_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:\n"
                    f"<code>/find {title[:20]}</code>",
                    parse_mode='HTML'
                )
                
                self.pending_content.pop(user.id, None)
        
        elif data == "content_edit_title":
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            context.user_data['waiting_for_custom_title'] = True
            
            await query.edit_message_text(
                "‚úèÔ∏è <b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n\n"
                "–ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ö–∞—Ä—Ç–∞ –º–µ—Ç—Ä–æ –ö–∏–µ–≤–∞</code>",
                parse_mode='HTML'
            )
        
        elif data == "content_change_category":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            keyboard = []
            for cat_key, cat_name in self.content.CATEGORIES.items():
                keyboard.append([InlineKeyboardButton(cat_name, callback_data=f"content_cat_{cat_key}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üîÑ <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
        elif data.startswith("content_cat_"):
            # –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            new_category = data.replace("content_cat_", "")
            
            if user.id in self.pending_content:
                self.pending_content[user.id]['analysis']['category'] = new_category
                
                content_id = self.pending_content[user.id]['content_id']
                await self.db.update_content(
                    content_id=content_id,
                    user_id=user.id,
                    category=new_category
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –Ω–∞–∑–≤–∞–Ω–∏–∏
                await self._ask_for_title_after_category(query, self.pending_content[user.id]['analysis'])
        
        elif data == "content_cancel":
            # –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if user.id in self.pending_content:
                content_id = self.pending_content[user.id]['content_id']
                await self.db.delete_content(content_id, user.id)
                self.pending_content.pop(user.id, None)
            
            await query.edit_message_text(
                "‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                parse_mode='HTML'
            )
    
    async def handle_custom_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        user = update.effective_user
        
        if not context.user_data.get('waiting_for_custom_title'):
            return False
        
        context.user_data.pop('waiting_for_custom_title', None)
        
        custom_title = update.message.text.strip()
        
        if user.id in self.pending_content:
            content_id = self.pending_content[user.id]['content_id']
            category = self.pending_content[user.id]['analysis'].get('category', 'other')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            await self.db.update_content(
                content_id=content_id,
                user_id=user.id,
                title=custom_title
            )
            
            category_emoji = self.content.CATEGORIES.get(category, "üìÇ").split()[0]
            
            await update.message.reply_text(
                f"‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{custom_title}</code>\n"
                f"{category_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title()}\n"
                f"üÜî ID: #{content_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:\n"
                f"<code>/find {custom_title[:20]}</code>",
                parse_mode='HTML'
            )
            
            self.pending_content.pop(user.id, None)
        
        return True
    
    async def _ask_for_title_after_category(self, query, analysis: Dict):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        suggested_title = analysis.get('suggested_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = analysis.get('category', 'other')
        
        category_emoji = self.content.CATEGORIES.get(category, "üìÇ").split()[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"content_accept_{suggested_title}")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="content_edit_title")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="content_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ú® <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"{category_emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.title()}\n"
            f"üí° <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{suggested_title}</code>\n\n"
            f"–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def find_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /find –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - /find –∫–∞—Ä—Ç–∞ –º–µ—Ç—Ä–æ
        - /find —Å–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ
        - /find –∫–æ–¥ –ø–æ API
        """
        user = update.effective_user
        
        if not context.args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            stats = await self.content.get_library_stats(user.id)
            await update.message.reply_text(
                stats + "\n\n"
                "üîç <b>–ü–æ–∏—Å–∫:</b>\n"
                "<code>/find –∫–∞—Ä—Ç–∞ –º–µ—Ç—Ä–æ</code>\n"
                "<code>/find —Å–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ</code>\n"
                "<code>/find –∫–æ–¥ –ø–æ API</code>",
                parse_mode='HTML'
            )
            return
        
        query = " ".join(context.args)
        
        await update.message.reply_text(f"üîç –ò—â—É: <i>{query}</i>...", parse_mode='HTML')
        await update.message.chat.send_action(ChatAction.TYPING)
        
        # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ AI
        results = await self.content.smart_search(user.id, query)
        
        if not results:
            await update.message.reply_text(
                f"üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>{query}</i>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π:\n"
                f"‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (<code>/categories</code>)\n"
                f"‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É (<code>/library</code>)",
                parse_mode='HTML'
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.message.reply_text(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: <b>{len(results)}</b>",
            parse_mode='HTML'
        )
        
        for item in results[:10]:  # –¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self._send_content_item(update, context, item)
    
    async def _send_content_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE, item: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        content_type = item['content_type']
        title = item.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        description = item.get('description', '')
        category = item.get('category', 'other')
        
        category_emoji = self.content.CATEGORIES.get(category, "üìÇ").split()[0]
        
        caption = (
            f"üìù <b>{title}</b>\n"
            f"{category_emoji} {category.title()}\n"
            f"üÜî ID: #{item['id']}"
        )
        
        if description:
            caption += f"\n\n{description[:200]}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∏–ø—É
        if content_type == "image" and item.get('file_id'):
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=item['file_id'],
                caption=caption,
                parse_mode='HTML'
            )
        
        elif content_type == "text" and item.get('text_content'):
            text = item['text_content']
            await update.message.reply_text(
                f"{caption}\n\n"
                f"<code>{text[:1000]}</code>",
                parse_mode='HTML'
            )
        
        elif content_type == "code" and item.get('text_content'):
            code = item['text_content']
            await update.message.reply_text(
                f"{caption}\n\n"
                f"```\n{code[:1000]}\n```",
                parse_mode='Markdown'
            )
        
        elif content_type == "link" and item.get('url'):
            await update.message.reply_text(
                f"{caption}\n\n"
                f"üîó {item['url']}",
                parse_mode='HTML'
            )
        
        elif content_type == "document" and item.get('file_id'):
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=item['file_id'],
                caption=caption,
                parse_mode='HTML'
            )
        
        else:
            await update.message.reply_text(caption, parse_mode='HTML')
    
    async def library_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /library –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        user = update.effective_user
        
        stats = await self.content.get_library_stats(user.id)
        await update.message.reply_text(stats, parse_mode='HTML')
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        user = update.effective_user
        
        categories = await self.db.get_categories(user.id)
        
        if not categories:
            await update.message.reply_text(
                "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n–°–æ—Ö—Ä–∞–Ω–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥–æ–π /save!"
            )
            return
        
        text = "üìÇ <b>–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
        
        for cat in categories:
            emoji = self.content.CATEGORIES.get(cat, "üìÇ").split()[0]
            count = len(await self.db.get_content(user.id, category=cat, limit=1000))
            text += f"{emoji} <code>{cat}</code> ‚Äî {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
        
        text += "\nüîç –ù–∞–π—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n<code>/find –ø–æ–ª–µ–∑–Ω–æ–µ</code>"
        
        await update.message.reply_text(text, parse_mode='HTML')
    
    def extract_url_from_text(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        url_pattern = r'https?://[^\s]+'
        match = re.search(url_pattern, text)
        return match.group(0) if match else None
    
    async def auto_suggest_save(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        content_type: str,
        **kwargs
    ) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ AI —Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ
        
        Args:
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è should_auto_save
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        user = update.effective_user
        
        # AI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        decision = await self.content.should_auto_save(content_type, **kwargs)
        
        # –ï—Å–ª–∏ confidence < 0.6 - –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º
        if not decision.get('should_save') or decision.get('confidence', 0) < 0.6:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        context.user_data['auto_save_pending'] = {
            'content_type': content_type,
            'kwargs': kwargs
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="autosave_yes"),
                InlineKeyboardButton("‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="autosave_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        reason = decision.get('reason', '–ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
        
        await update.message.reply_text(
            f"üí° –ó–∞–º–µ—Ç–∏–ª–∞ —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª {reason}.\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É?",
            reply_markup=reply_markup
        )
        
        return True
    
    async def handle_autosave_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        query = update.callback_query
        user = update.effective_user
        
        await query.answer()
        
        if query.data == "autosave_yes":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            pending = context.user_data.get('auto_save_pending')
            
            if not pending:
                await query.edit_message_text("‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–Ω–æ–≤–æ.")
                return
            
            await query.edit_message_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            content_id, analysis = await self.content.analyze_and_save(
                user_id=user.id,
                content_type=pending['content_type'],
                **pending['kwargs']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            self.pending_content[user.id] = {
                'content_id': content_id,
                'analysis': analysis
            }
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
            await query.message.reply_text("‚ú® –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è _ask_for_title
            await self._ask_for_title_after_autosave(query, analysis)
            
            # –û—á–∏—â–∞–µ–º pending
            context.user_data.pop('auto_save_pending', None)
        
        elif query.data == "autosave_no":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
            await query.edit_message_text("üëå –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
            context.user_data.pop('auto_save_pending', None)
    
    async def _ask_for_title_after_autosave(self, query, analysis: Dict):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        suggested_title = analysis.get('suggested_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = analysis.get('category', 'other')
        description = analysis.get('description', '')
        
        category_emoji = self.content.CATEGORIES.get(category, "üìÇ").split()[0]
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"content_accept_{suggested_title}")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="content_edit_title")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="content_change_category")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="content_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"‚ú® <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"{category_emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.title()}\n"
            f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n<code>{suggested_title}</code>\n\n"
            f"–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º?"
        )
        
        await query.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

