"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—á–∏—Ö –∫–æ–º–∞–Ω–¥
"""
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from datetime import datetime

from database import Database
from services import WorkSiteParser


class WorkHandler:
    def __init__(self, db: Database, parser: WorkSiteParser):
        self.db = db
        self.parser = parser
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /stats [–¥–∞—Ç–∞] - –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–∞–π—Ç–∞
        """
        user = update.effective_user
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        date = None
        if context.args:
            date = context.args[0]
        
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–∞–π—Ç–∞...")
        await update.message.chat.send_action(ChatAction.TYPING)
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            stats = await self.parser.parse_statistics(date)
            
            if not stats:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.save_work_stats(
                user_id=user.id,
                date=date or datetime.now().strftime('%Y-%m-%d'),
                total_records=stats['total_records'],
                total_sfs=stats['total_sfs'],
                total_sch=stats['total_sch'],
                workers_data=stats['workers']
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã**

üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{stats['total_records']}**
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö (SFS): **{stats['total_sfs']}**
üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ (SCH): **{stats['total_sch']}**
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: **{len(stats['workers'])}**

**–¢–æ–ø-5 —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø–æ SFS:**
"""
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            top_workers = sorted(
                stats['workers'], 
                key=lambda x: x.get('sfs', 0), 
                reverse=True
            )[:5]
            
            for i, worker in enumerate(top_workers, 1):
                team_emoji = "üíö" if "Good Bunny" in worker.get('team', '') else "üíô"
                message += f"\n{i}. {team_emoji} **{worker['name']}**"
                message += f"\n   SFS: {worker.get('sfs', 0)} | Only now: {worker.get('only_now', 0)} | SCH: {worker.get('sch', 0)}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö."
            )
    
    async def workers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /workers [–∫–æ–º–∞–Ω–¥–∞] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        """
        user = update.effective_user
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ
        team_filter = None
        if context.args:
            team_filter = " ".join(context.args)
        
        await update.message.chat.send_action(ChatAction.TYPING)
        
        try:
            stats = await self.parser.parse_statistics()
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return
            
            workers = stats['workers']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if team_filter:
                workers = [w for w in workers if team_filter.lower() in w.get('team', '').lower()]
            
            if not workers:
                await update.message.reply_text("üë• –†–∞–±–æ—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üë• **–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤** ({len(workers)})\n\n"
            
            for worker in workers[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                team_emoji = "üíö" if "Good Bunny" in worker.get('team', '') else "üíô"
                message += f"{team_emoji} **{worker['name']}** {worker.get('username', '')}\n"
                message += f"   SFS: {worker.get('sfs', 0)} | SCH: {worker.get('sch', 0)}\n"
            
            if len(workers) > 20:
                message += f"\n_...–∏ –µ—â–µ {len(workers) - 20} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤_"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def check_worker_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /check <–∏–º—è> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        """
        if not context.args:
            await update.message.reply_text(
                "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check <–∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞>"
            )
            return
        
        worker_name = " ".join(context.args)
        
        await update.message.chat.send_action(ChatAction.TYPING)
        
        try:
            stats = await self.parser.parse_statistics()
            
            if not stats:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return
            
            # –ò—â–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
            found = None
            for worker in stats['workers']:
                if worker_name.lower() in worker['name'].lower():
                    found = worker
                    break
            
            if not found:
                await update.message.reply_text(
                    f"üîç –†–∞–±–æ—Ç–Ω–∏–∫ **{worker_name}** –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            team_emoji = "üíö" if "Good Bunny" in found.get('team', '') else "üíô"
            
            message = f"""{team_emoji} **{found['name']}**
            
üë§ Username: {found.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑ –ö–æ–º–∞–Ω–¥–∞: {found.get('team', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {found.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä **–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚úÖ SFS: **{found.get('sfs', 0)}**
‚è∞ Only now: **{found.get('only_now', 0)}**
üìã SCH: **{found.get('sch', 0)}**
"""
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

